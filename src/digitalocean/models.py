# generated by datamodel-codegen:
#   filename:  DigitalOcean-public.v2.yaml
#   timestamp: 2022-07-28T18:56:47+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from ipaddress import IPv4Address, IPv6Address
from typing import Any, Dict, List, Optional, Union
from uuid import UUID

from pydantic import AnyUrl, BaseModel, EmailStr, Field, constr


class Error(BaseModel):
    id: str = Field(
        ...,
        description='A short identifier corresponding to the HTTP status code returned. For  example, the ID for a response returning a 404 status code would be "not_found."',
        example="not_found",
    )
    message: str = Field(
        ...,
        description="A message providing additional information about the error, including  details to help resolve it when possible.",
        example="The resource you were accessing could not be found.",
    )
    request_id: Optional[str] = Field(
        None,
        description="Optionally, some endpoints may include a request ID that should be  provided when reporting bugs or opening support tickets to help  identify the issue.",
        example="4d9d8375-3c56-4925-a3e7-eb137fed17e9",
    )


class OneClicks(BaseModel):
    slug: str = Field(
        ...,
        description="The slug identifier for the 1-Click application.",
        example="monitoring",
        title="slug",
    )
    type: str = Field(
        ...,
        description="The type of the 1-Click application.",
        example="kubernetes",
        title="type",
    )


class OneClicksCreate(BaseModel):
    addon_slugs: List[str] = Field(
        ...,
        description="An array of 1-Click Application slugs to be installed to the Kubernetes cluster.",
        example=["kube-state-metrics", "loki"],
        title="addon_slugs",
    )
    cluster_uuid: str = Field(
        ...,
        description="A unique ID for the Kubernetes cluster to which the 1-Click Applications will be installed.",
        example="50a994b6-c303-438f-9495-7e896cfe6b08",
        title="cluster_uuid",
    )


class Status(Enum):
    active = "active"
    warning = "warning"
    locked = "locked"


class Team(BaseModel):
    uuid: Optional[str] = Field(
        None,
        description="The unique universal identifier for the current team.",
        example="5df3e3004a17e242b7c20ca6c9fc25b701a47ece",
    )
    name: Optional[str] = Field(
        None, description="The name for the current team.", example="My Team"
    )


class Account(BaseModel):
    droplet_limit: int = Field(
        ...,
        description="The total number of Droplets current user or team may have active at one time.",
        example=25,
    )
    floating_ip_limit: int = Field(
        ...,
        description="The total number of Floating IPs the current user or team may have.",
        example=5,
    )
    email: str = Field(
        ...,
        description="The email address used by the current user to register for DigitalOcean.",
        example="sammy@digitalocean.com",
    )
    uuid: str = Field(
        ...,
        description="The unique universal identifier for the current user.",
        example="b6fr89dbf6d9156cace5f3c78dc9851d957381ef",
    )
    email_verified: bool = Field(
        ...,
        description="If true, the user has verified their account via email. False otherwise.",
        example=True,
    )
    status: Status = Field(
        ...,
        description='This value is one of "active", "warning" or "locked".',
        example="active",
    )
    status_message: str = Field(
        ...,
        description="A human-readable message giving more details about the status of the account.",
        example=" ",
    )
    team: Optional[Team] = Field(
        None,
        description="When authorized in a team context, includes information about the current team.",
    )


class SshKeyId(BaseModel):
    __root__: int = Field(
        ...,
        description="A unique identification number for this key. Can be used to embed a  specific SSH key into a Droplet.",
        example=512189,
    )


class SshKeyFingerprint(BaseModel):
    __root__: str = Field(
        ...,
        description="A unique identifier that differentiates this key from other keys using  a format that SSH recognizes. The fingerprint is created when the key is added to your account.",
        example="3b:16:bf:e4:8b:00:8b:b8:59:8c:a9:d3:f0:19:45:fa",
    )


class SshKeyName(BaseModel):
    __root__: str = Field(
        ...,
        description="A human-readable display name for this key, used to easily identify the SSH keys when they are displayed.",
        example="My SSH Public Key",
    )


class SshKeys(BaseModel):
    id: Optional[SshKeyId] = None
    fingerprint: Optional[SshKeyFingerprint] = None
    public_key: str = Field(
        ...,
        description="The entire public key string that was uploaded. Embedded into the root user's `authorized_keys` file if you include this key during Droplet creation.",
        example="ssh-rsa AEXAMPLEaC1yc2EAAAADAQABAAAAQQDDHr/jh2Jy4yALcK4JyWbVkPRaWmhck3IgCoeOO3z1e2dBowLh64QAM+Qb72pxekALga2oi4GvT+TlWNhzPH4V example",
    )
    name: SshKeyName


class LinkToLastPage(BaseModel):
    last: Optional[str] = Field(
        None,
        description="URI of the last page of the results.",
        example="https://api.digitalocean.com/v2/images?page=2",
    )


class LinkToNextPage(BaseModel):
    next: Optional[str] = Field(
        None,
        description="URI of the next page of the results.",
        example="https://api.digitalocean.com/v2/images?page=2",
    )


class ForwardLinks(LinkToLastPage, LinkToNextPage):
    pass


class LinkToFirstPage(BaseModel):
    first: Optional[str] = Field(
        None,
        description="URI of the first page of the results.",
        example="https://api.digitalocean.com/v2/images?page=1",
    )


class LinkToPrevPage(BaseModel):
    prev: Optional[str] = Field(
        None,
        description="URI of the previous page of the results.",
        example="https://api.digitalocean.com/v2/images?page=1",
    )


class BackwardLinks(LinkToFirstPage, LinkToPrevPage):
    pass


class PageLinks(BaseModel):
    pages: Optional[Union[ForwardLinks, BackwardLinks, Any]] = Field(
        None,
        example={
            "pages": {
                "first": "https://api.digitalocean.com/v2/account/keys?page=1",
                "prev": "https://api.digitalocean.com/v2/account/keys?page=2",
            }
        },
    )


class Pagination(BaseModel):
    links: Optional[PageLinks] = None


class MetaProperties(BaseModel):
    total: Optional[int] = Field(
        None, description="Number of objects returned by the request.", example=1
    )


class Meta(BaseModel):
    meta: MetaProperties


class Region(BaseModel):
    name: str = Field(
        ...,
        description="The display name of the region.  This will be a full name that is used in the control panel and other interfaces.",
        example="New York 3",
    )
    slug: str = Field(
        ...,
        description="A human-readable string that is used as a unique identifier for each region.",
        example="nyc3",
    )
    features: List[str] = Field(
        ...,
        description="This attribute is set to an array which contains features available in this region",
        example=[
            "private_networking",
            "backups",
            "ipv6",
            "metadata",
            "install_agent",
            "storage",
            "image_transfer",
        ],
    )
    available: bool = Field(
        ...,
        description="This is a boolean value that represents whether new Droplets can be created in this region.",
        example=True,
    )
    sizes: List[str] = Field(
        ...,
        description="This attribute is set to an array which contains the identifying slugs for the sizes available in this region.",
        example=[
            "s-1vcpu-1gb",
            "s-1vcpu-2gb",
            "s-1vcpu-3gb",
            "s-2vcpu-2gb",
            "s-3vcpu-1gb",
            "s-2vcpu-4gb",
            "s-4vcpu-8gb",
            "s-6vcpu-16gb",
            "s-8vcpu-32gb",
            "s-12vcpu-48gb",
            "s-16vcpu-64gb",
            "s-20vcpu-96gb",
            "s-24vcpu-128gb",
            "s-32vcpu-192g",
        ],
    )


class Slug(BaseModel):
    __root__: str = Field(
        ...,
        description="A human-readable string that is used as a unique identifier for each region.",
        example="nyc3",
    )


class Status1(Enum):
    in_progress = "in-progress"
    completed = "completed"
    errored = "errored"


class Action(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique numeric ID that can be used to identify and reference an action.",
        example=36804636,
    )
    status: Status1 = Field(
        "in-progress",
        description='The current status of the action. This can be "in-progress", "completed", or "errored".',
        example="completed",
    )
    type: Optional[str] = Field(
        None,
        description='This is the type of action that the object represents. For example, this could be "transfer" to represent the state of an image transfer action.',
        example="create",
    )
    started_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the action was initiated.",
        example="2020-11-14T16:29:21Z",
    )
    completed_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the action was completed.",
        example="2020-11-14T16:30:06Z",
    )
    resource_id: Optional[int] = Field(
        None,
        description="A unique identifier for the resource that the action is associated with.",
        example=3164444,
    )
    resource_type: Optional[str] = Field(
        None,
        description="The type of resource that the action is associated with.",
        example="droplet",
    )
    region: Optional[Region] = None
    region_slug: Optional[Slug] = None


class AppsDeploymentJob(BaseModel):
    name: Optional[str] = Field(
        None, example="migrate-db", title="The name of this job"
    )
    source_commit_hash: Optional[str] = Field(
        None,
        example="54d4a727f457231062439895000d45437c7bb405",
        title="The commit hash of the repository that was used to build this job",
    )


class AppsDeploymentFunctions(BaseModel):
    name: Optional[str] = Field(
        None,
        example="my-functions-component",
        title="The name of this functions component",
    )
    source_commit_hash: Optional[str] = Field(
        None,
        description="The commit hash of the repository that was used to build this functions component.",
        example="54d4a727f457231062439895000d45437c7bb405",
    )
    namespace: Optional[str] = Field(
        None,
        description="The namespace where the functions are deployed.",
        example="ap-b2a93513-8d9b-4223-9d61-5e7272c81c32",
    )


class AppsDeploymentPhase(Enum):
    UNKNOWN = "UNKNOWN"
    PENDING_BUILD = "PENDING_BUILD"
    BUILDING = "BUILDING"
    PENDING_DEPLOY = "PENDING_DEPLOY"
    DEPLOYING = "DEPLOYING"
    ACTIVE = "ACTIVE"
    SUPERSEDED = "SUPERSEDED"
    ERROR = "ERROR"
    CANCELED = "CANCELED"


class AppsDeploymentProgressStepReason(BaseModel):
    code: Optional[str] = Field(None, example="Title of Error", title="The error code")
    message: Optional[str] = Field(
        None, example="This is an error", title="The error message"
    )


class AppsDeploymentProgressStepStatus(Enum):
    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    RUNNING = "RUNNING"
    ERROR = "ERROR"
    SUCCESS = "SUCCESS"


class AppsDeploymentProgressStep(BaseModel):
    component_name: Optional[str] = Field(
        None,
        example="component",
        title="The component name that this step is associated with",
    )
    ended_at: Optional[datetime] = Field(
        None, example="2020-11-19T20:27:18Z", title="The end time of this step"
    )
    message_base: Optional[str] = Field(
        None,
        description='The base of a human-readable description of the step intended to be combined with the component name for presentation. For example:\n\n`message_base` = "Building service"\n`component_name` = "api"',
        example="Building service",
    )
    name: Optional[str] = Field(
        None, example="example_step", title="The name of this step"
    )
    reason: Optional[AppsDeploymentProgressStepReason] = None
    started_at: Optional[datetime] = Field(
        None, example="2020-11-19T20:27:18Z", title="The start time of this step"
    )
    status: Optional[AppsDeploymentProgressStepStatus] = None
    steps: Optional[List[Dict[str, Any]]] = Field(
        None, title="Child steps of this step"
    )


class AppsDeploymentProgress(BaseModel):
    error_steps: Optional[int] = Field(
        None, example=3, title="Number of unsuccessful steps"
    )
    pending_steps: Optional[int] = Field(
        None, example=2, title="Number of pending steps"
    )
    running_steps: Optional[int] = Field(
        None, example=2, title="Number of currently running steps"
    )
    steps: Optional[List[AppsDeploymentProgressStep]] = Field(
        None, title="The deployment's steps"
    )
    success_steps: Optional[int] = Field(
        None, example=4, title="Number of successful steps"
    )
    summary_steps: Optional[List[AppsDeploymentProgressStep]] = Field(
        None, title="A flattened summary of the steps"
    )
    total_steps: Optional[int] = Field(None, example=5, title="Total number of steps")


class AppsDeploymentService(BaseModel):
    name: Optional[str] = Field(None, example="web", title="The name of this service")
    source_commit_hash: Optional[str] = Field(
        None,
        example="54d4a727f457231062439895000d45437c7bb405",
        title="The commit hash of the repository that was used to build this service",
    )


class Type(Enum):
    UNSPECIFIED = "UNSPECIFIED"
    DEFAULT = "DEFAULT"
    PRIMARY = "PRIMARY"
    ALIAS = "ALIAS"


class MinimumTlsVersion(Enum):
    field_1_2 = "1.2"
    field_1_3 = "1.3"


class AppDomainSpec(BaseModel):
    domain: constr(
        regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
    ) = Field(
        ...,
        description="The hostname for the domain",
        example="app.example.com",
        max_length=253,
        min_length=4,
        regex="^((xn--)?[a-zA-Z0-9]+(-[a-zA-Z0-9]+)*\\.)+[a-zA-Z]{2,}\\.?$",
    )
    type: Type = Field(
        "UNSPECIFIED",
        description="- DEFAULT: The default `.ondigitalocean.app` domain assigned to this app\n- PRIMARY: The primary domain for this app that is displayed as the default in the control panel, used in bindable environment variables, and any other places that reference an app's live URL. Only one domain may be set as primary.\n- ALIAS: A non-primary domain",
        example="DEFAULT",
    )
    wildcard: Optional[bool] = Field(
        None,
        description="Indicates whether the domain includes all sub-domains, in addition to the given domain",
        example=True,
    )
    zone: Optional[
        constr(
            regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
        )
    ] = Field(
        None,
        description="Optional. If the domain uses DigitalOcean DNS and you would like App\nPlatform to automatically manage it for you, set this to the name of the\ndomain on your account.\n\nFor example, If the domain you are adding is `app.domain.com`, the zone\ncould be `domain.com`.",
        example="example.com",
    )
    minimum_tls_version: Optional[MinimumTlsVersion] = Field(
        None,
        description='The minimum version of TLS a client application can use to access resources for the domain.  Must be one of the following values wrapped within quotations: `"1.2"` or `"1.3"`.',
        example="1.3",
    )


class AppsGitSourceSpec(BaseModel):
    branch: Optional[str] = Field(
        None, description="The name of the branch to use", example="main"
    )
    repo_clone_url: Optional[str] = Field(
        None,
        description="The clone URL of the repo. Example: `https://github.com/digitalocean/sample-golang.git`",
        example="https://github.com/digitalocean/sample-golang.git",
    )


class AppsGithubSourceSpec(BaseModel):
    branch: Optional[str] = Field(
        None, description="The name of the branch to use", example="main"
    )
    deploy_on_push: Optional[bool] = Field(
        None,
        description="Whether to automatically deploy new commits made to the repo",
        example=True,
    )
    repo: Optional[str] = Field(
        None,
        description="The name of the repo in the format owner/repo. Example: `digitalocean/sample-golang`",
        example="digitalocean/sample-golang",
    )


class AppsGitlabSourceSpec(AppsGithubSourceSpec):
    pass


class RegistryType(Enum):
    DOCKER_HUB = "DOCKER_HUB"
    DOCR = "DOCR"


class AppsImageSourceSpec(BaseModel):
    registry: Optional[str] = Field(
        None,
        description="The registry name. Must be left empty for the `DOCR` registry type.",
        example="registry.hub.docker.com",
    )
    registry_type: Optional[RegistryType] = Field(
        None,
        description="- DOCKER_HUB: The DockerHub container registry type.\n- DOCR: The DigitalOcean container registry type.",
        example="DOCR",
    )
    repository: Optional[str] = Field(
        None, description="The repository name.", example="origin/master"
    )
    tag: str = Field(
        "latest",
        description="The repository tag. Defaults to `latest` if not provided.",
        example="latest",
    )


class Scope(Enum):
    UNSET = "UNSET"
    RUN_TIME = "RUN_TIME"
    BUILD_TIME = "BUILD_TIME"
    RUN_AND_BUILD_TIME = "RUN_AND_BUILD_TIME"


class Type1(Enum):
    GENERAL = "GENERAL"
    SECRET = "SECRET"


class AppVariableDefinition(BaseModel):
    key: str = Field(
        ...,
        description="The variable name",
        example="BASE_URL",
        regex="^[_A-Za-z][_A-Za-z0-9]*$",
    )
    scope: Scope = Field(
        "RUN_AND_BUILD_TIME",
        description="- RUN_TIME: Made available only at run-time\n- BUILD_TIME: Made available only at build-time\n- RUN_AND_BUILD_TIME: Made available at both build and run-time",
        example="BUILD_TIME",
    )
    type: Type1 = Field(
        "GENERAL",
        description="- GENERAL: A plain-text environment variable\n- SECRET: A secret encrypted environment variable",
        example="GENERAL",
    )
    value: Optional[str] = Field(
        None,
        description="The value. If the type is `SECRET`, the value will be encrypted on first submission. On following submissions, the encrypted value should be used.",
        example="http://example.com",
    )


class AppLogDestinationPapertrailSpec(BaseModel):
    endpoint: str = Field(
        ...,
        description="Papertrail syslog endpoint.",
        example="https://mypapertrailendpoint.com",
    )


class AppLogDestinationDatadogSpec(BaseModel):
    endpoint: Optional[str] = Field(
        None,
        description="Datadog HTTP log intake endpoint.",
        example="https://mydatadogendpoint.com",
    )
    api_key: str = Field(
        ...,
        description="Datadog API key.",
        example="abcdefghijklmnopqrstuvwxyz0123456789",
    )


class AppLogDestinationLogtailSpec(BaseModel):
    token: Optional[str] = Field(
        None,
        description="Logtail token.",
        example="abcdefghijklmnopqrstuvwxyz0123456789",
    )


class AppLogDestinationDefinition(BaseModel):
    name: str = Field(
        ...,
        example="my_log_destination",
        max_length=42,
        min_length=2,
        regex="^[A-Za-z0-9()\\[\\]'\"][-A-Za-z0-9_. \\/()\\[\\]]{0,40}[A-Za-z0-9()\\[\\]'\"]$",
    )
    papertrail: Optional[AppLogDestinationPapertrailSpec] = None
    datadog: Optional[AppLogDestinationDatadogSpec] = None
    logtail: Optional[AppLogDestinationLogtailSpec] = None


class AppComponentBase(BaseModel):
    name: Optional[str] = Field(
        None,
        description="The name. Must be unique across all components within the same app.",
        example="api",
        max_length=32,
        min_length=2,
        regex="^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
    )
    git: Optional[AppsGitSourceSpec] = None
    github: Optional[AppsGithubSourceSpec] = None
    gitlab: Optional[AppsGitlabSourceSpec] = None
    image: Optional[AppsImageSourceSpec] = None
    dockerfile_path: Optional[str] = Field(
        None,
        description="The path to the Dockerfile relative to the root of the repo. If set, it will be used to build this component. Otherwise, App Platform will attempt to build it using buildpacks.",
        example="path/to/Dockerfile",
    )
    build_command: Optional[str] = Field(
        None,
        description="An optional build command to run while building this component from source.",
        example="npm run build",
    )
    run_command: Optional[str] = Field(
        None,
        description="An optional run command to override the component's default.",
        example="bin/api",
    )
    source_dir: Optional[str] = Field(
        None,
        description="An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.",
        example="path/to/dir",
    )
    envs: Optional[List[AppVariableDefinition]] = Field(
        None,
        description="A list of environment variables made available to the component.",
    )
    environment_slug: Optional[str] = Field(
        None,
        description="An environment slug describing the type of this app. For a full list, please refer to [the product documentation](https://www.digitalocean.com/docs/app-platform/).",
        example="node-js",
    )
    log_destinations: Optional[AppLogDestinationDefinition] = None


class InstanceSizeSlug(Enum):
    basic_xxs = "basic-xxs"
    basic_xs = "basic-xs"
    basic_s = "basic-s"
    basic_m = "basic-m"
    professional_xs = "professional-xs"
    professional_s = "professional-s"
    professional_m = "professional-m"
    professional_1l = "professional-1l"
    professional_l = "professional-l"
    professional_xl = "professional-xl"


class AppComponentInstanceBase(BaseModel):
    instance_count: int = Field(
        1,
        description="The amount of instances that this component should be scaled to. Default: 1",
        example=2,
        ge=1,
    )
    instance_size_slug: InstanceSizeSlug = Field(
        "basic-xxs",
        description="The instance size to use for this component. Default: `basic-xxs`",
        example="basic-xxs",
    )


class AppsStringMatch(BaseModel):
    exact: Optional[str] = Field(
        None,
        description="Exact string match. Only 1 of `exact`, `prefix`, or `regex` must be set.",
        example="https://www.example.com",
        max_length=256,
        min_length=1,
    )
    prefix: Optional[str] = Field(
        None,
        description="Prefix-based match. Only 1 of `exact`, `prefix`, or `regex` must be set.",
        example="https://www.example.com",
        max_length=256,
        min_length=1,
    )
    regex: Optional[str] = Field(
        None,
        description="RE2 style regex-based match. Only 1 of `exact`, `prefix`, or `regex` must be set. For more information about RE2 syntax, see: https://github.com/google/re2/wiki/Syntax",
        example="^.*example.com",
        max_length=256,
        min_length=1,
    )


class AppsCorsPolicy(BaseModel):
    allow_origins: Optional[List[AppsStringMatch]] = Field(
        None,
        description="The set of allowed CORS origins.",
        example=[{"exact": "https://www.example.com"}, {"regex": "^.*example.com"}],
    )
    allow_methods: Optional[List[str]] = Field(
        None,
        description="The set of allowed HTTP methods. This configures the `Access-Control-Allow-Methods` header.",
        example=["GET", "OPTIONS", "POST", "PUT", "PATCH", "DELETE"],
    )
    allow_headers: Optional[List[str]] = Field(
        None,
        description="The set of allowed HTTP request headers. This configures the `Access-Control-Allow-Headers` header.",
        example=["Content-Type", "X-Custom-Header"],
    )
    expose_headers: Optional[List[str]] = Field(
        None,
        description="The set of HTTP response headers that browsers are allowed to access. This configures the `Access-Control-Expose-Headers` header.",
        example=["Content-Encoding", "X-Custom-Header"],
    )
    max_age: Optional[str] = Field(
        None,
        description="An optional duration specifying how long browsers can cache the results of a preflight request. This configures the `Access-Control-Max-Age` header.",
        example="5h30m",
    )
    allow_credentials: Optional[bool] = Field(
        None,
        description="Whether browsers should expose the response to the client-side JavaScript code when the request’s credentials mode is include. This configures the `Access-Control-Allow-Credentials` header.",
        example=False,
    )


class AppServiceSpecHealthCheck(BaseModel):
    failure_threshold: Optional[int] = Field(
        None,
        description="The number of failed health checks before considered unhealthy.",
        example=2,
    )
    port: Optional[int] = Field(
        None,
        description="The port on which the health check will be performed. If not set, the health check will be performed on the component's http_port.",
        example=80,
        ge=1,
        le=65535,
    )
    http_path: Optional[str] = Field(
        None,
        description="The route path used for the HTTP health check ping. If not set, the HTTP health check will be disabled and a TCP health check used instead.",
        example="/health",
    )
    initial_delay_seconds: Optional[int] = Field(
        None,
        description="The number of seconds to wait before beginning health checks.",
        example=30,
    )
    period_seconds: Optional[int] = Field(
        None,
        description="The number of seconds to wait between health checks.",
        example=60,
    )
    success_threshold: Optional[int] = Field(
        None,
        description="The number of successful health checks before considered healthy.",
        example=3,
    )
    timeout_seconds: Optional[int] = Field(
        None,
        description="The number of seconds after which the check times out.",
        example=45,
    )


class AppRouteSpec(BaseModel):
    path: Optional[str] = Field(
        None,
        description="An HTTP path prefix. Paths must start with / and must be unique across all components within an app.",
        example="/api",
    )
    preserve_path_prefix: Optional[bool] = Field(
        None,
        description="An optional flag to preserve the path that is forwarded to the backend service. By default, the HTTP request path will be trimmed from the left when forwarded to the component. For example, a component with `path=/api` will have requests to `/api/list` trimmed to `/list`. If this value is `true`, the path will remain `/api/list`.",
        example=True,
    )


class AppServiceSpec(AppComponentBase, AppComponentInstanceBase):
    cors: Optional[AppsCorsPolicy] = None
    health_check: Optional[AppServiceSpecHealthCheck] = None
    http_port: Optional[int] = Field(
        None,
        description="The internal port on which this service's run command will listen. Default: 8080\nIf there is not an environment variable with the name `PORT`, one will be automatically added with its value set to the value of this field.",
        example=3000,
        ge=1,
        le=65535,
    )
    internal_ports: Optional[List[int]] = Field(
        None,
        description="The ports on which this service will listen for internal traffic.",
        example=[80, 443],
    )
    routes: Optional[List[AppRouteSpec]] = Field(
        None,
        description="A list of HTTP routes that should be routed to this component.",
    )


class AppStaticSiteSpec(AppComponentBase):
    index_document: str = Field(
        "index.html",
        description="The name of the index document to use when serving this static site. Default: index.html",
        example="main.html",
    )
    error_document: str = Field(
        "404.html",
        description="The name of the error document to use when serving this static site. Default: 404.html. If no such file exists within the built assets, App Platform will supply one.",
        example="error.html",
    )
    catchall_document: Optional[str] = Field(
        None,
        description="The name of the document to use as the fallback for any requests to documents that are not found when serving this static site. Only 1 of `catchall_document` or `error_document` can be set.",
        example="index.html",
    )
    output_dir: Optional[str] = Field(
        None,
        description="An optional path to where the built assets will be located, relative to the build context. If not set, App Platform will automatically scan for these directory names: `_static`, `dist`, `public`, `build`.",
        example="dist/",
    )
    cors: Optional[AppsCorsPolicy] = None
    routes: Optional[List[AppRouteSpec]] = Field(
        None,
        description="A list of HTTP routes that should be routed to this component.",
    )


class Kind(Enum):
    UNSPECIFIED = "UNSPECIFIED"
    PRE_DEPLOY = "PRE_DEPLOY"
    POST_DEPLOY = "POST_DEPLOY"
    FAILED_DEPLOY = "FAILED_DEPLOY"


class AppJobSpec(AppComponentBase, AppComponentInstanceBase):
    kind: Kind = Field(
        "UNSPECIFIED",
        description="- UNSPECIFIED: Default job type, will auto-complete to POST_DEPLOY kind.\n- PRE_DEPLOY: Indicates a job that runs before an app deployment.\n- POST_DEPLOY: Indicates a job that runs after an app deployment.\n- FAILED_DEPLOY: Indicates a job that runs after a component fails to deploy.",
        example="PRE_DEPLOY",
    )


class AppWorkerSpec(AppComponentBase, AppComponentInstanceBase):
    pass


class AppAlertSpecRule(Enum):
    UNSPECIFIED_RULE = "UNSPECIFIED_RULE"
    CPU_UTILIZATION = "CPU_UTILIZATION"
    MEM_UTILIZATION = "MEM_UTILIZATION"
    RESTART_COUNT = "RESTART_COUNT"
    DEPLOYMENT_FAILED = "DEPLOYMENT_FAILED"
    DEPLOYMENT_LIVE = "DEPLOYMENT_LIVE"
    DOMAIN_FAILED = "DOMAIN_FAILED"
    DOMAIN_LIVE = "DOMAIN_LIVE"
    FUNCTIONS_ACTIVATION_COUNT = "FUNCTIONS_ACTIVATION_COUNT"
    FUNCTIONS_AVERAGE_DURATION_MS = "FUNCTIONS_AVERAGE_DURATION_MS"
    FUNCTIONS_ERROR_RATE_PER_MINUTE = "FUNCTIONS_ERROR_RATE_PER_MINUTE"
    FUNCTIONS_AVERAGE_WAIT_TIME_MS = "FUNCTIONS_AVERAGE_WAIT_TIME_MS"
    FUNCTIONS_ERROR_COUNT = "FUNCTIONS_ERROR_COUNT"
    FUNCTIONS_GB_RATE_PER_SECOND = "FUNCTIONS_GB_RATE_PER_SECOND"


class AppAlertSpecOperator(Enum):
    UNSPECIFIED_OPERATOR = "UNSPECIFIED_OPERATOR"
    GREATER_THAN = "GREATER_THAN"
    LESS_THAN = "LESS_THAN"


class AppAlertSpecWindow(Enum):
    UNSPECIFIED_WINDOW = "UNSPECIFIED_WINDOW"
    FIVE_MINUTES = "FIVE_MINUTES"
    TEN_MINUTES = "TEN_MINUTES"
    THIRTY_MINUTES = "THIRTY_MINUTES"
    ONE_HOUR = "ONE_HOUR"


class AppAlertSpec(BaseModel):
    rule: Optional[AppAlertSpecRule] = None
    disabled: Optional[bool] = Field(
        None, description="Is the alert disabled?", example=False
    )
    operator: Optional[AppAlertSpecOperator] = None
    value: Optional[float] = Field(
        None, description="Threshold value for alert", example=2.32
    )
    window: Optional[AppAlertSpecWindow] = None


class AppFunctionsSpec(BaseModel):
    cors: Optional[AppsCorsPolicy] = None
    routes: Optional[List[AppRouteSpec]] = Field(
        None,
        description="A list of HTTP routes that should be routed to this component.",
    )
    name: str = Field(
        ...,
        description="The name. Must be unique across all components within the same app.",
        example="api",
        max_length=32,
        min_length=2,
        regex="^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
    )
    source_dir: Optional[str] = Field(
        None,
        description="An optional path to the working directory to use for the build. For Dockerfile builds, this will be used as the build context. Must be relative to the root of the repo.",
        example="path/to/dir",
    )
    alerts: Optional[List[AppAlertSpec]] = None
    envs: Optional[List[AppVariableDefinition]] = Field(
        None,
        description="A list of environment variables made available to the component.",
    )
    git: Optional[AppsGitSourceSpec] = None
    github: Optional[AppsGithubSourceSpec] = None
    gitlab: Optional[AppsGitlabSourceSpec] = None
    log_destinations: Optional[AppLogDestinationDefinition] = None


class Engine(Enum):
    UNSET = "UNSET"
    MYSQL = "MYSQL"
    PG = "PG"
    REDIS = "REDIS"


class AppDatabaseSpec(BaseModel):
    cluster_name: Optional[str] = Field(
        None,
        description="The name of the underlying DigitalOcean DBaaS cluster. This is required for production databases. For dev databases, if cluster_name is not set, a new cluster will be provisioned.",
        example="cluster_name",
    )
    db_name: Optional[str] = Field(
        None,
        description="The name of the MySQL or PostgreSQL database to configure.",
        example="my_db",
    )
    db_user: Optional[str] = Field(
        None,
        description="The name of the MySQL or PostgreSQL user to configure.",
        example="superuser",
    )
    engine: Engine = Field(
        "UNSET",
        description="- MYSQL: MySQL\n- PG: PostgreSQL\n- REDIS: Redis",
        example="PG",
    )
    name: str = Field(
        ...,
        description="The name. Must be unique across all components within the same app.",
        example="prod-db",
        max_length=32,
        min_length=2,
        regex="^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
    )
    production: Optional[bool] = Field(
        None, description="Whether this is a production or dev database.", example=True
    )
    version: Optional[str] = Field(
        None, description="The version of the database engine", example="12"
    )


class Region1(Enum):
    ams = "ams"
    nyc = "nyc"
    fra = "fra"


class AppSpec(BaseModel):
    name: str = Field(
        ...,
        description="The name of the app. Must be unique across all apps in the same account.",
        example="web-app-01",
        max_length=32,
        min_length=2,
        regex="^[a-z][a-z0-9-]{0,30}[a-z0-9]$",
    )
    region: Optional[Region1] = Field(
        None,
        description="The slug form of the geographical origin of the app. Default: `nearest available`",
        example="nyc",
    )
    domains: Optional[List[AppDomainSpec]] = Field(
        None, description="A set of hostnames where the application will be available."
    )
    services: Optional[List[AppServiceSpec]] = Field(
        None, description="Workloads which expose publicly-accessible HTTP services."
    )
    static_sites: Optional[List[AppStaticSiteSpec]] = Field(
        None, description="Content which can be rendered to static web assets."
    )
    jobs: Optional[List[AppJobSpec]] = Field(
        None,
        description="Pre and post deployment workloads which do not expose publicly-accessible HTTP routes.",
    )
    workers: Optional[List[AppWorkerSpec]] = Field(
        None,
        description="Workloads which do not expose publicly-accessible HTTP services.",
    )
    functions: Optional[List[AppFunctionsSpec]] = Field(
        None,
        description="Workloads which expose publicly-accessible HTTP services via Functions Components.",
    )
    databases: Optional[List[AppDatabaseSpec]] = Field(
        None,
        description="Database instances which can provide persistence to workloads within the\napplication.",
    )


class AppsDeploymentStaticSite(BaseModel):
    name: Optional[str] = Field(
        None, example="web", title="The name of this static site"
    )
    source_commit_hash: Optional[str] = Field(
        None,
        example="54d4a727f457231062439895000d45437c7bb405",
        title="The commit hash of the repository that was used to build this static site",
    )


class AppsDeploymentWorker(BaseModel):
    name: Optional[str] = Field(
        None, example="queue-runner", title="The name of this worker"
    )
    source_commit_hash: Optional[str] = Field(
        None,
        example="54d4a727f457231062439895000d45437c7bb405",
        title="The commit hash of the repository that was used to build this worker",
    )


class AppsDeployment(BaseModel):
    cause: Optional[str] = Field(
        None,
        example="commit 9a4df0b pushed to github/digitalocean/sample-golang",
        title="What caused this deployment to be created",
    )
    cloned_from: Optional[str] = Field(
        None,
        example="3aa4d20e-5527-4c00-b496-601fbd22520a",
        title="The ID of a previous deployment that this deployment was cloned from",
    )
    created_at: Optional[datetime] = Field(
        None,
        example="2020-07-28T18:00:00Z",
        title="The creation time of the deployment",
    )
    id: Optional[str] = Field(
        None,
        example="b6bdf840-2854-4f87-a36c-5f231c617c84",
        title="The ID of the deployment",
    )
    jobs: Optional[List[AppsDeploymentJob]] = Field(
        None, title="Job components that are part of this deployment"
    )
    functions: Optional[List[AppsDeploymentFunctions]] = Field(
        None, title="Functions components that are part of this deployment"
    )
    phase: Optional[AppsDeploymentPhase] = None
    phase_last_updated_at: Optional[datetime] = Field(
        None,
        example="0001-01-01T00:00:00Z",
        title="When the deployment phase was last updated",
    )
    progress: Optional[AppsDeploymentProgress] = None
    services: Optional[List[AppsDeploymentService]] = Field(
        None, title="Service components that are part of this deployment"
    )
    spec: Optional[AppSpec] = None
    static_sites: Optional[List[AppsDeploymentStaticSite]] = Field(
        None, title="Static Site components that are part of this deployment"
    )
    tier_slug: Optional[str] = Field(
        None, example="basic", title="The current pricing tier slug of the deployment"
    )
    updated_at: Optional[datetime] = Field(
        None,
        example="2020-07-28T18:00:00Z",
        title="When the deployment was last updated",
    )
    workers: Optional[List[AppsDeploymentWorker]] = Field(
        None, title="Worker components that are part of this deployment"
    )


class AppsDomainPhase(Enum):
    UNKNOWN = "UNKNOWN"
    PENDING = "PENDING"
    CONFIGURING = "CONFIGURING"
    ACTIVE = "ACTIVE"
    ERROR = "ERROR"


class AppsDomainProgress(BaseModel):
    steps: Optional[List[Dict[str, Any]]] = Field(
        None, title="The steps of the domain's progress"
    )


class AppsDomain(BaseModel):
    id: Optional[str] = Field(
        None,
        example="4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
        title="The ID of the domain",
    )
    phase: Optional[AppsDomainPhase] = None
    progress: Optional[AppsDomainProgress] = None
    spec: Optional[AppDomainSpec] = None


class AppsRegion(BaseModel):
    continent: Optional[str] = Field(
        None, example="europe", title="The continent that this region is in"
    )
    data_centers: Optional[List[str]] = Field(
        None, example=["ams"], title="Data centers that are in this region"
    )
    default: Optional[bool] = Field(
        None,
        description="Whether or not the region is presented as the default.",
        example=True,
    )
    disabled: Optional[bool] = Field(
        None, example=True, title="Whether or not the region is open for new apps"
    )
    flag: Optional[str] = Field(None, example="ams", title="The flag of this region")
    label: Optional[str] = Field(
        None, example="ams", title="A human-readable name of the region"
    )
    reason: Optional[str] = Field(
        None, example="to crowded", title="Reason that this region is not available"
    )
    slug: Optional[str] = Field(
        None, example="basic", title="The slug form of the region name"
    )


class App(BaseModel):
    active_deployment: Optional[AppsDeployment] = None
    created_at: Optional[datetime] = Field(
        None, example="2020-11-19T20:27:18Z", title="The creation time of the app"
    )
    default_ingress: Optional[str] = Field(
        None,
        example="digitalocean.com",
        title="The default hostname on which the app is accessible",
    )
    domains: Optional[List[AppsDomain]] = Field(
        None, title="Contains all domains for the app"
    )
    id: Optional[str] = Field(
        None,
        example="4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
        title="The ID of the application",
    )
    in_progress_deployment: Optional[AppsDeployment] = None
    last_deployment_created_at: Optional[datetime] = Field(
        None,
        example="2020-11-19T20:27:18Z",
        title="The creation time of the last deployment",
    )
    live_domain: Optional[str] = Field(
        None, example="live_domain", title="The live domain of the app"
    )
    live_url: Optional[str] = Field(
        None, example="google.com", title="The live URL of the app"
    )
    live_url_base: Optional[str] = Field(
        None,
        example="digitalocean.com",
        title="The live URL base of the app, the URL excluding the path",
    )
    owner_uuid: Optional[str] = Field(
        None,
        example="4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
        title="The ID of the account to which the application belongs",
    )
    region: Optional[AppsRegion] = None
    spec: AppSpec
    tier_slug: Optional[str] = Field(
        None, example="basic", title="The current pricing tier slug of the app"
    )
    updated_at: Optional[datetime] = Field(
        None,
        example="2020-12-01T00:42:16Z",
        title="Time of the app's last configuration update",
    )
    pinned_deployment: Optional[AppsDeployment] = None


class AppsResponse(Pagination, Meta):
    apps: Optional[List[App]] = Field(None, title="A list of apps")


class AppsCreateAppRequest(BaseModel):
    spec: AppSpec


class AppResponse(BaseModel):
    app: Optional[App] = None


class AppsUpdateAppRequest(AppsCreateAppRequest):
    pass


class AppsDeleteAppResponse(BaseModel):
    id: Optional[str] = Field(
        None,
        example="4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
        title="The ID of the app that was deleted",
    )


class AppsDeploymentsResponse(Pagination, Meta):
    deployments: Optional[List[AppsDeployment]] = Field(
        None, title="A list of deployments"
    )


class AppsCreateDeploymentRequest(BaseModel):
    force_build: Optional[bool] = Field(
        None,
        example=True,
        title="Indicates whether to force a build of app from source even if an existing cached build is suitable for re-use",
    )


class AppsDeploymentResponse(BaseModel):
    deployment: Optional[AppsDeployment] = None


class AppsGetLogsResponse(BaseModel):
    historic_urls: Optional[List[str]] = Field(
        None, title="A list of URLs to archived log files"
    )
    live_url: Optional[str] = Field(
        None,
        description="A URL of the real-time live logs. This URL may use either the `https://` or `wss://` protocols and will keep pushing live logs as they become available.",
        example="ws://logs/build",
    )


class AppsTier(BaseModel):
    build_seconds: Optional[str] = Field(
        None, example="233", title="The amount of included build time in seconds"
    )
    egress_bandwidth_bytes: Optional[str] = Field(
        None, example="123", title="The amount of included outbound bandwidth in bytes"
    )
    name: Optional[str] = Field(
        None, example="test", title="A human-readable name of the tier"
    )
    slug: Optional[str] = Field(None, example="test", title="The slug of the tier")
    storage_bytes: Optional[str] = Field(
        None, example="10000000", title="The allotted disk space in bytes"
    )


class AppsListTiersResponse(BaseModel):
    tiers: Optional[List[AppsTier]] = None


class AppsGetTierResponse(BaseModel):
    tier: Optional[AppsTier] = None


class InstanceSizeCpuType(Enum):
    UNSPECIFIED = "UNSPECIFIED"
    SHARED = "SHARED"
    DEDICATED = "DEDICATED"


class AppsInstanceSize(BaseModel):
    cpu_type: Optional[InstanceSizeCpuType] = None
    cpus: Optional[str] = Field(
        None, example="3", title="The number of allotted vCPU cores"
    )
    memory_bytes: Optional[str] = Field(
        None, example="1048", title="The allotted memory in bytes"
    )
    name: Optional[str] = Field(
        None, example="name", title="A human-readable name of the instance size"
    )
    slug: Optional[str] = Field(
        None, example="basic", title="The slug of the instance size"
    )
    tier_downgrade_to: Optional[str] = Field(
        None,
        example="basic",
        title="The slug of the corresponding downgradable instance size on the lower tier",
    )
    tier_slug: Optional[str] = Field(
        None,
        example="basic",
        title="The slug of the tier to which this instance size belongs",
    )
    tier_upgrade_to: Optional[str] = Field(
        None,
        example="basic",
        title="The slug of the corresponding upgradable instance size on the higher tier",
    )
    usd_per_month: Optional[str] = Field(
        None, example="23", title="The cost of this instance size in USD per month"
    )
    usd_per_second: Optional[str] = Field(
        None,
        example="0.00000001232",
        title="The cost of this instance size in USD per second",
    )


class AppsListInstanceSizesResponse(BaseModel):
    discount_percent: Optional[float] = Field(None, example=2.32)
    instance_sizes: Optional[List[AppsInstanceSize]] = None


class AppsGetInstanceSizeResponse(BaseModel):
    instance_size: Optional[AppsInstanceSize] = None


class AppsListRegionsResponse(BaseModel):
    regions: Optional[List[AppsRegion]] = None


class AppPropose(BaseModel):
    spec: AppSpec
    app_id: Optional[str] = Field(
        None,
        description="An optional ID of an existing app. If set, the spec will be treated as a proposed update to the specified app. The existing app is not modified using this method.",
        example="b6bdf840-2854-4f87-a36c-5f231c617c84",
    )


class AppProposeResponse(BaseModel):
    app_is_static: Optional[bool] = Field(
        None, description="Indicates whether the app is a static app.", example=True
    )
    app_name_available: Optional[bool] = Field(
        None, description="Indicates whether the app name is available.", example=True
    )
    app_name_suggestion: Optional[str] = Field(
        None,
        description="The suggested name if the proposed app name is unavailable.",
        example="newName",
    )
    existing_static_apps: Optional[str] = Field(
        None,
        description="The maximum number of free static apps the account can have. We will charge you for any additional static apps.",
        example="2",
    )
    spec: Optional[AppSpec] = None
    app_cost: Optional[int] = Field(
        None,
        description="The monthly cost of the proposed app in USD using the next pricing plan tier. For example, if you propose an app that uses the Basic tier, the `app_tier_upgrade_cost` field displays the monthly cost of the app if it were to use the Professional tier. If the proposed app already uses the most expensive tier, the field is empty.",
        example=5,
    )
    app_tier_downgrade_cost: Optional[int] = Field(
        None,
        description="The monthly cost of the proposed app in USD using the previous pricing plan tier. For example, if you propose an app that uses the Professional tier, the `app_tier_downgrade_cost` field displays the monthly cost of the app if it were to use the Basic tier. If the proposed app already uses the lest expensive tier, the field is empty.",
        example=17,
    )


class AppAlertEmail(BaseModel):
    __root__: str = Field(..., example="sammy@digitalocean.com")


class AppAlertSlackWebhook(BaseModel):
    url: Optional[str] = Field(
        None,
        example="https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX",
        title="URL of the Slack webhook",
    )
    channel: Optional[str] = Field(
        None, example="Channel Name", title="Name of the Slack Webhook Channel"
    )


class AppAlertProgressStepReason(AppsDeploymentProgressStepReason):
    pass


class AppAlertProgressStep(BaseModel):
    name: Optional[str] = Field(
        None, example="example_step", title="The name of this step"
    )
    status: Optional[AppsDeploymentProgressStepStatus] = None
    started_at: Optional[datetime] = Field(
        None, example="2020-11-19T20:27:18Z", title="The start time of this step"
    )
    ended_at: Optional[datetime] = Field(
        None, example="2020-11-19T20:27:18Z", title="The start time of this step"
    )
    reason: Optional[AppAlertProgressStepReason] = None


class AppAlertProgress(BaseModel):
    steps: Optional[List[AppAlertProgressStep]] = Field(
        None, title="Steps of an alert's progress."
    )


class AppAlert(BaseModel):
    id: Optional[str] = Field(
        None,
        example="4f6c71e2-1e90-4762-9fee-6cc4a0a9f2cf",
        title="The ID of the alert",
    )
    component_name: Optional[str] = Field(
        None, example="backend", title="Name of component the alert belongs to"
    )
    spec: Optional[AppAlertSpec] = None
    emails: Optional[List[AppAlertEmail]] = Field(
        None, example=["sammy@digitalocean.com"], title="Emails for alerts to go to"
    )
    slack_webhooks: Optional[List[AppAlertSlackWebhook]] = Field(
        None, title="Slack Webhooks to send alerts to"
    )
    phase: Optional[AppsDomainPhase] = None
    progress: Optional[AppAlertProgress] = None


class AppsListAlertsResponse(BaseModel):
    alerts: Optional[List[AppAlert]] = None


class AppsAssignAppAlertDestinationsRequest(BaseModel):
    emails: Optional[List[AppAlertEmail]] = Field(
        None, example=["sammy@digitalocean.com"]
    )
    slack_webhooks: Optional[List[AppAlertSlackWebhook]] = None


class AppsAlertResponse(BaseModel):
    alert: Optional[AppAlert] = None


class AppsRollbackAppRequest(BaseModel):
    deployment_id: Optional[str] = Field(
        None,
        description="The ID of the deployment to rollback to.",
        example="3aa4d20e-5527-4c00-b496-601fbd22520a",
    )
    skip_pin: Optional[bool] = Field(
        None,
        description="Whether to skip pinning the rollback deployment. If false, the rollback deployment will be pinned and any new deployments including Auto Deploy on Push hooks will be disabled until the rollback is either manually committed or reverted via the CommitAppRollback or RevertAppRollback endpoints respectively. If true, the rollback will be immediately committed and the app will remain unpinned.",
        example=False,
    )


class Code(Enum):
    incompatible_phase = "incompatible_phase"
    incompatible_result = "incompatible_result"
    exceeded_revision_limit = "exceeded_revision_limit"
    app_pinned = "app_pinned"
    database_config_conflict = "database_config_conflict"
    region_conflict = "region_conflict"
    static_site_requires_rebuild = "static_site_requires_rebuild"
    image_source_missing_digest = "image_source_missing_digest"


class AppRollbackValidationCondition(BaseModel):
    code: Optional[Code] = Field(
        None,
        description="A code identifier that represents the failing condition.\n\nFailing conditions:\n  - `incompatible_phase` - indicates that the deployment's phase is not suitable for rollback.\n  - `incompatible_result` - indicates that the deployment's result is not suitable for rollback.\n  - `exceeded_revision_limit` - indicates that the app has exceeded the rollback revision limits for its tier.\n  - `app_pinned` - indicates that there is already a rollback in progress and the app is pinned.\n  - `database_config_conflict` - indicates that the deployment's database config is different than the current config.\n  - `region_conflict` - indicates that the deployment's region differs from the current app region.\n  \nWarning conditions:\n  - `static_site_requires_rebuild` - indicates that the deployment contains at least one static site that will require a rebuild.\n  - `image_source_missing_digest` - indicates that the deployment contains at least one component with an image source that is missing a digest.\n",
        example="exceeded_revision_limit",
    )
    message: Optional[str] = Field(
        None,
        description="A human-readable message describing the failing condition.",
        example='the deployment is past the maximum historical revision limit of 0 for the "starter" app tier',
    )
    components: Optional[List[str]] = Field(None, example=["www"])


class Ttl(Enum):
    integer_60 = 60
    integer_600 = 600
    integer_3600 = 3600
    integer_86400 = 86400
    integer_604800 = 604800


class CdnEndpoint(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a CDN endpoint.",
        example="892071a0-bb95-49bc-8021-3afd67a210bf",
    )
    origin: constr(
        regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
    ) = Field(
        ...,
        description="The fully qualified domain name (FQDN) for the origin server which provides the content for the CDN. This is currently restricted to a Space.",
        example="static-images.nyc3.digitaloceanspaces.com",
    )
    endpoint: Optional[
        constr(
            regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
        )
    ] = Field(
        None,
        description="The fully qualified domain name (FQDN) from which the CDN-backed content is served.",
        example="static-images.nyc3.cdn.digitaloceanspaces.com",
    )
    ttl: Ttl = Field(
        3600,
        description="The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.",
        example=3600,
    )
    certificate_id: Optional[UUID] = Field(
        None,
        description="The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.",
        example="892071a0-bb95-49bc-8021-3afd67a210bf",
    )
    custom_domain: Optional[
        constr(
            regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
        )
    ] = Field(
        None,
        description="The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint.",
        example="static.example.com",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the CDN endpoint was created.",
        example="2018-03-21T16:02:37Z",
    )


class UpdateEndpoint(BaseModel):
    ttl: Ttl = Field(
        3600,
        description="The amount of time the content is cached by the CDN's edge servers in seconds. TTL must be one of 60, 600, 3600, 86400, or 604800. Defaults to 3600 (one hour) when excluded.",
        example=3600,
    )
    certificate_id: Optional[UUID] = Field(
        None,
        description="The ID of a DigitalOcean managed TLS certificate used for SSL when a custom subdomain is provided.",
        example="892071a0-bb95-49bc-8021-3afd67a210bf",
    )
    custom_domain: Optional[
        constr(
            regex=r"^(([a-zA-Z0-9]|[a-zA-Z0-9][a-zA-Z0-9\-]{0,61}[a-zA-Z0-9])\.)*([A-Za-z0-9]|[A-Za-z0-9][A-Za-z0-9\-]{0,61}[A-Za-z0-9])\Z"
        )
    ] = Field(
        None,
        description="The fully qualified domain name (FQDN) of the custom subdomain used with the CDN endpoint.",
        example="static.example.com",
    )


class PurgeCache(BaseModel):
    files: List[str] = Field(
        ...,
        description="An array of strings containing the path to the content to be purged from the CDN cache.",
        example=["path/to/image.png", "path/to/css/*"],
    )


class State(Enum):
    pending = "pending"
    verified = "verified"
    error = "error"


class Type2(Enum):
    custom = "custom"
    lets_encrypt = "lets_encrypt"


class Certificate(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a certificate.",
        example="892071a0-bb95-49bc-8021-3afd67a210bf",
    )
    name: Optional[str] = Field(
        None,
        description="A unique human-readable name referring to a certificate.",
        example="web-cert-01",
    )
    not_after: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents the certificate's expiration date.",
        example="2017-02-22T00:23:00Z",
    )
    sha1_fingerprint: Optional[str] = Field(
        None,
        description="A unique identifier generated from the SHA-1 fingerprint of the certificate.",
        example="dfcc9f57d86bf58e321c2c6c31c7a971be244ac7",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the certificate was created.",
        example="2017-02-08T16:02:37Z",
    )
    dns_names: Optional[List[str]] = Field(
        None,
        description="An array of fully qualified domain names (FQDNs) for which the certificate was issued.",
        example=["www.example.com", "example.com"],
    )
    state: Optional[State] = Field(
        None,
        description="A string representing the current state of the certificate. It may be `pending`, `verified`, or `error`.",
        example="verified",
    )
    type: Optional[Type2] = Field(
        None,
        description="A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.",
        example="lets_encrypt",
    )


class CertificateCreateBase(BaseModel):
    name: str = Field(
        ...,
        description="A unique human-readable name referring to a certificate.",
        example="web-cert-01",
    )
    type: Optional[Type2] = Field(
        None,
        description="A string representing the type of the certificate. The value will be `custom` for a user-uploaded certificate or `lets_encrypt` for one automatically generated with Let's Encrypt.",
        example="lets_encrypt",
    )


class CertificateRequestLetsEncrypt(CertificateCreateBase):
    dns_names: List[str] = Field(
        ...,
        description="An array of fully qualified domain names (FQDNs) for which the certificate was issued. A certificate covering all subdomains can be issued using a wildcard (e.g. `*.example.com`).",
        example=["www.example.com", "example.com"],
    )


class CertificateRequestCustom(CertificateCreateBase):
    private_key: str = Field(
        ...,
        description="The contents of a PEM-formatted private-key corresponding to the SSL certificate.",
        example="-----BEGIN PRIVATE KEY-----\nMIIEvgIBADANBgkqhkiG9w0BAQEFAASCBKgwggSkAgEAAoIBAQDBIZMz8pnK6V52\nSVf+CYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1\nDwGb8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86X\nwrE4oFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3w\nZ2mzZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1F\nZRnak/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFX\nfqqbQwuRAgMBAAECggEBAILLmkW0JzOkmLTDNzR0giyRkLoIROqDpfLtjKdwm95l\n9NUBJcU4vCvXQITKt/NhtnNTexcowg8pInb0ksJpg3UGE+4oMNBXVi2UW5MQZ5cm\ncVkQqgXkBF2YAY8FMaB6EML+0En2+dGR/3gIAr221xsFiXe1kHbB8Nb2c/d5HpFt\neRpLVJnK+TxSr78PcZA8DDGlSgwvgimdAaFUNO2OqB9/0E9UPyKk2ycdff/Z6ldF\n0hkCLtdYTTl8Kf/OwjcuTgmA2O3Y8/CoQX/L+oP9Rvt9pWCEfuebiOmHJVPO6Y6x\ngtQVEXwmF1pDHH4Qtz/e6UZTdYeMl9G4aNO2CawwcaYECgYEA57imgSOG4XsJLRh\nGGncV9R/xhy4AbDWLtAMzQRX4ktvKCaHWyQV2XK2we/cu29NLv2Y89WmerTNPOU+\nP8+pB31uty2ELySVn15QhKpQClVEAlxCnnNjXYrii5LOM80+lVmxvQwxVd8Yz8nj\nIntyioXNBEnYS7V2RxxFGgFun1cCgYEA1V3W+Uyamhq8JS5EY0FhyGcXdHd70K49\nW1ou7McIpncf9tM9acLS1hkI98rd2T69Zo8mKoV1V2hjFaKUYfNys6tTkYWeZCcJ\n3rW44j9DTD+FmmjcX6b8DzfybGLehfNbCw6n67/r45DXIV/fk6XZfkx6IEGO4ODt\nNfnvx4TuI1cCgYBACDiKqwSUvmkUuweOo4IuCxyb5Ee8v98P5JIE/VRDxlCbKbpx\npxEam6aBBQVcDi+n8o0H3WjjlKc6UqbW/01YMoMrvzotxNBLz8Y0QtQHZvR6KoCG\nRKCKstxTcWflzKuknbqN4RapAhNbKBDJ8PMSWfyDWNyaXzSmBdvaidbF1QKBgDI0\no4oD0Xkjg1QIYAUu9FBQmb9JAjRnW36saNBEQS/SZg4RRKknM683MtoDvVIKJk0E\nsAlfX+4SXQZRPDMUMtA+Jyrd0xhj6zmhbwClvDMr20crF3fWdgcqtft1BEFmsuyW\nJUMe5OWmRkjPI2+9ncDPRAllA7a8lnSV/Crph5N/AoGBAIK249temKrGe9pmsmAo\nQbNuYSmwpnMoAqdHTrl70HEmK7ob6SIVmsR8QFAkH7xkYZc4Bxbx4h1bdpozGB+/\nAangbiaYJcAOD1QyfiFbflvI1RFeHgrk7VIafeSeQv6qu0LLMi2zUbpgVzxt78Wg\neTuK2xNR0PIM8OI7pRpgyj1I\n-----END PRIVATE KEY-----",
    )
    leaf_certificate: str = Field(
        ...,
        description="The contents of a PEM-formatted public SSL certificate.",
        example="-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz8pnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VWHIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgWrgeYGCysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBodHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL9p+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----",
    )
    certificate_chain: Optional[str] = Field(
        None,
        description="The full PEM-formatted trust chain between the certificate authority's certificate and your domain's SSL certificate.",
        example="-----BEGIN CERTIFICATE-----\nMIIFFjCCA/6gAwIBAgISA0AznUJmXhu08/89ZuSPC/kRMA0GCSqGSIb3DQEBCwUA\nMEoxCzAJBgNVBAYTAlVTMRYwFAYDVQQKEw1MZXQncyBFbmNyeXB0MSMwIQYDVQQD\nExpMZXQncyBFbmNyeXB0IEF1dGhvcml0eSBYMzAeFw0xNjExMjQwMDIzMDBaFw0x\nNzAyMjIwMDIzMDBaMCQxIjAgBgNVBAMTGWNsb3VkLmFuZHJld3NvbWV0aGluZy5j\nb20wggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDBIZMz7tnK6V52SVf+\nCYssOfCQHAx5f0Ou5rYbq3xNh8VHAIYJCQ1QxQIxKSP6+uODSYrb2KWyurP1DwGb\n8OYm0J3syEDtCUQik1cpCzpeNlAZ2f8FzXyYQAqPopxdRpsFz8DtZnVvu86XwrE4\noFPl9MReICmZfBNWylpV5qgFPoXyJ70ZAsTm3cEe3n+LBXEnY4YrVDRWxA3wZ2mz\nZ03HZ1hHrxK9CMnS829U+8sK+UneZpCO7yLRPuxwhmps0wpK/YuZZfRAKF1FZRna\nk/SIQ28rnWufmdg16YqqHgl5JOgnb3aslKRvL4dI2Gwnkd2IHtpZnTR0gxFXfqqb\nQwuRAgMBAAGjggIaMIICFjAOBgNVHQ8BAf8EBAMCBaAwHQYDVR0lBBYwFAYIKwYB\nBQUHAwEGCCsGAQUFBwMCMAwGA1UdEwEB/wQCMAAwHQYDVR0OBBYEFLsAFcxAhFX1\nMbCnzr9hEO5rL4jqMB8GA1UdIwQYMBaAFKhKamMEfd265tE5t6ZFZe/zqOyhMHAG\nCCsGAQUFBwEBBGQwYjAvBggrBgEFBQcwAYYjaHR0cDovL29jc3AuaW50LXgzLmxl\ndHNlbmNyeXB0Lm9yZy8wLwYIKwYBBQUHMAKGI2h0dHA6Ly9jZXJ0LmludC14My5s\nZXRzZW5jcnlwdC5vcmcvMCQGA1UdEQQdMBuCGWNsb3VkLmFuZHJld3NvbWV0aGlu\nZy5jb20wgf4GA1UdIASB9jCB8zAIBgZngQwBAgEwgeWECysGAQQBgt8TAQEBMIHW\nMCYGCCsGAQUFBwIBFhpodHRwOi8vY3BzLmxldHNlbmNyeXB0Lm9yZzCBqwYIKwYB\nBQUHAgIwgZ4MgZtUaGlzIENlcnRpZmljYXRlIG1heSBvbmx5IGJlIHJlbGllZCB1\ncG9uIGJ5IFJlbHlpbmcgUGFydGllcyBhbmQgb25seSQ2ziBhY2NvcmRhbmNlIHdp\ndGggdGhlIENlcnRpZmljYXRlIFBvbGljeSBmb3VuZCBhdCBsdHRwczovL2xldHNl\nbmNyeXB0Lm9yZy9yZXBvc2l0b3J5LzANBgkqhkiG9w0BAQsFAAOCAQEAOZVQvrjM\nPKXLARTjB5XsgfyDN3/qwLl7SmwGkPe+B+9FJpfScYG1JzVuCj/SoaPaK34G4x/e\niXwlwOXtMOtqjQYzNu2Pr2C+I+rVmaxIrCUXFmC205IMuUBEeWXG9Y/HvXQLPabD\nD3Gdl5+Feink9SDRP7G0HaAwq13hI7ARxkL3o+UIY39X0dV3WOboW2Re8nrkFXJ7\nq9Z6shK5QgpBfsLjtjNsQzaGV3ve1gOg25aTJGearBWOvEjJNA1wGMoKVXOtYwm/\nWyWoVdCQ8HmconcbJB6xc0UZ1EjvzRr5ZIvSa5uHZD0L3m7/kpPWlAlFJ7hHASPu\nUlF1zblDmg2Iaw==\n-----END CERTIFICATE-----\n-----BEGIN CERTIFICATE-----\nMIIEkjCCA3qgAwIBAgIQCgFBQgAAAVOFc2oLheynCDANBgkqhkiG9w0BAQsFADA/\nMSQwIgYDVQQKExtEaWdpdGFsIFNpZ25hdHVyZSBUcnVzdCBDby4xFzAVBgNVBAMT\nDkRTVCBSb290IENBIFgzMB4XDTE2MDMxNzE2NDA0NloXDTIxMDMxNzE2NDA0Nlow\nSjELMAkGA1UEBhMCVVMxFjAUBgNVBAoTDUxldCdzIEVuY3J5cHQxIzAhBgNVBAMT\nGkxldCdzIEVuY3J5cHQgQXV0aG9yaXR5IFgzMIIBIjANBgkqhkiG9w0BAQEFAAOC\nAQ8AMIIBCgKCAQEAnNMM8FrlLsd3cl03g7NoYzDq1zUmGSXhvb418XCSL7e4S0EF\nq6meNQhY7LEqxGiHC6PjdeTm86dicbp5gWAf15Gan/PQeGdxyGkOlZHP/uaZ6WA8\nSMx+yk13EiSdRxta67nsHjcAHJyse6cF6s5K671B5TaYucv9bTyWaN8jKkKQDIZ0\nZ8h/pZq4UmEUEz9l6YKHy9v6Dlb2honzhT+Xhq+w3Brvaw2VFn3EK6BlspkENnWA\na6xK8xuQSXgvopZPKiAlKQTGdMDQMc2PMTiVFrqoM7hD8bEfwzB/onkxEz0tNvjj\n/PIzark5McWvxI0NHWQWM6r6hCm21AvA2H3DkwIPOIUo4IBfTCCAXkwEgYDVR0T\nAQH/BAgwBgEB/wIBADAOBgNVHQ8BAf8EBAMCAYYwfwYIKwYBBQUHAQEEczBxMDIG\nCCsGAQUFBzABhiZodHRwOi8vaXNyZy50cnVzdGlkLm9jc3AuaWRlbnRydXN0LmNv\nbTA7BggrBgEFBQcwAoYvaHR0cDovL2FwcHMuaWRlbnRydXN0LmNvbS9yb290cy9k\nc3Ryb290Y2F4My5wN2MwHwYDVR0jBBgwFoAUxKexpHsscfrb4UuQdf/EFWCFiRAw\nVAYDVR0gBE0wSzAIBgZngQwBAgEwPwYLKwYBBAGC3xMBAQEwMDAuBggrBgEFBQcC\nARYiaHR0cDovL2Nwcy5yb290LXgxLmxldHNlbmNyeXB0Lm9yZzA8BgNVHR8ENTAz\nMDGgL6AthitodHRwOi8vY3JsLmlkZW50cnVzdC5jb20vRFNUUk9PVENBWDNDUkwu\nY3JsMB0GA1UdDgQWBBSoSmpjBH3duubRObemRWXv86jsoTANBgkqhkiG9w0BAQsF\nAAOCAQEA3TPXEfNjWDjdGBX7CVW+dla5cEilaUcne8IkCJLxWh9KEik3JHRRHGJo\nuM2VcGfl96S8TihRzZvoroed6ti6WqEBmtzw3Wodatg+VyOeph4EYpr/1wXKtx8/\nwApIvJSwtmVi4MFU5aMqrSDE6ea73Mj2tcMyo5jMd6jmeWUHK8so/joWUoHOUgwu\nX4Po1QYz+3dszkDqMp4fklxBwXRsW10KXzPMTZ+sOPAveyxindmjkW8lGy+QsRlG\nPfZ+G6Z6h7mjem0Y+iWlkYcV4PIWL1iwBi8saCbGS5jN2p8M+X+Q7UNKEkROb3N6\nKOqkqm57TH2H3eDJAkSnh6/DNFu0Qg==\n-----END CERTIFICATE-----",
    )


class Balance(BaseModel):
    month_to_date_balance: Optional[str] = Field(
        None,
        description="Balance as of the `generated_at` time.  This value includes the `account_balance` and `month_to_date_usage`.",
        example="23.44",
    )
    account_balance: Optional[str] = Field(
        None,
        description="Current balance of the customer's most recent billing activity.  Does not reflect `month_to_date_usage`.",
        example="12.23",
    )
    month_to_date_usage: Optional[str] = Field(
        None,
        description="Amount used in the current billing period as of the `generated_at` time.",
        example="11.21",
    )
    generated_at: Optional[datetime] = Field(
        None,
        description="The time at which balances were most recently generated.",
        example="2019-07-09T15:01:12Z",
    )


class Type4(Enum):
    ACHFailure = "ACHFailure"
    Adjustment = "Adjustment"
    AttemptFailed = "AttemptFailed"
    Chargeback = "Chargeback"
    Credit = "Credit"
    CreditExpiration = "CreditExpiration"
    Invoice = "Invoice"
    Payment = "Payment"
    Refund = "Refund"
    Reversal = "Reversal"


class BillingHistory(BaseModel):
    description: Optional[str] = Field(
        None,
        description="Description of the billing history entry.",
        example="Invoice for May 2018",
    )
    amount: Optional[str] = Field(
        None, description="Amount of the billing history entry.", example="12.34"
    )
    invoice_id: Optional[str] = Field(
        None,
        description="ID of the invoice associated with the billing history entry, if  applicable.",
        example="123",
    )
    invoice_uuid: Optional[str] = Field(
        None,
        description="UUID of the invoice associated with the billing history entry, if  applicable.",
        example="example-uuid",
    )
    date: Optional[datetime] = Field(
        None,
        description="Time the billing history entry occured.",
        example="2018-06-01T08:44:38Z",
    )
    type: Optional[Type4] = Field(
        None, description="Type of billing history entry.", example="Invoice"
    )


class MetaOptionalTotal(Meta):
    pass


class InvoicePreview(BaseModel):
    invoice_uuid: Optional[str] = Field(
        None,
        description="The UUID of the invoice. The canonical reference for the invoice.",
        example="fdabb512-6faf-443c-ba2e-665452332a9e",
    )
    amount: Optional[str] = Field(
        None,
        description="Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.",
        example="23.45",
    )
    invoice_period: Optional[str] = Field(
        None,
        description="Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.",
        example="2020-01",
    )
    updated_at: Optional[str] = Field(
        None,
        description="Time the invoice was last updated.  This is only included with the invoice preview.",
        example="2020-01-23T06:31:50Z",
    )


class InvoiceItem(BaseModel):
    product: Optional[str] = Field(
        None,
        description="Name of the product being billed in the invoice item.",
        example="Kubernetes Clusters",
    )
    resource_uuid: Optional[str] = Field(
        None,
        description="UUID of the resource billing in the invoice item if available.",
        example="711157cb-37c8-4817-b371-44fa3504a39c",
    )
    resource_id: Optional[str] = Field(
        None,
        description="ID of the resource billing in the invoice item if available.",
        example="2353624",
    )
    group_description: Optional[str] = Field(
        None,
        description="Description of the invoice item when it is a grouped set of usage, such  as DOKS or databases.",
        example="my-doks-cluster",
    )
    description: Optional[str] = Field(
        None,
        description="Description of the invoice item.",
        example="a56e086a317d8410c8b4cfd1f4dc9f82",
    )
    amount: Optional[str] = Field(
        None,
        description="Billed amount of this invoice item. Billed in USD.",
        example="12.34",
    )
    duration: Optional[str] = Field(
        None,
        description="Duration of time this invoice item was used and subsequently billed.",
        example="744",
    )
    duration_unit: Optional[str] = Field(
        None, description="Unit of time for duration.", example="Hours"
    )
    start_time: Optional[str] = Field(
        None,
        description="Time the invoice item began to be billed for usage.",
        example="2020-01-01T00:00:00Z",
    )
    end_time: Optional[str] = Field(
        None,
        description="Time the invoice item stoped being billed for usage.",
        example="2020-02-01T00:00:00Z",
    )
    project_name: Optional[str] = Field(
        None,
        description="Name of the DigitalOcean Project this resource belongs to.",
        example="web",
    )


class BillingAddress(BaseModel):
    address_line1: Optional[str] = Field(
        None, description="Street address line 1", example="101 Shark Row"
    )
    address_line2: Optional[str] = Field(
        None, description="Street address line 2", example=" "
    )
    city: Optional[str] = Field(None, description="City", example="Atlantis")
    region: Optional[str] = Field(None, description="Region", example="OC")
    postal_code: Optional[str] = Field(None, description="Postal code", example="12345")
    country_iso2_code: Optional[str] = Field(
        None, description="Country (ISO2) code", example="US"
    )
    created_at: Optional[str] = Field(
        None,
        description="Timestamp billing address was created",
        example="2019-09-03T16:34:46.000+00:00",
    )
    updated_at: Optional[str] = Field(
        None,
        description="Timestamp billing address was updated",
        example="2019-09-03T16:34:46.000+00:00",
    )


class ProductChargeItem(BaseModel):
    amount: Optional[str] = Field(
        None, description="Amount of the charge", example="10.00"
    )
    name: Optional[str] = Field(
        None, description="Description of the charge", example="Spaces Subscription"
    )
    count: Optional[str] = Field(
        None, description="Number of times the charge was applied", example="1"
    )


class ProductUsageCharges(BaseModel):
    name: Optional[str] = Field(
        None,
        description="Description of usage charges",
        example="Product usage charges",
    )
    amount: Optional[str] = Field(
        None, description="Total amount charged", example="12.34"
    )
    items: Optional[List[ProductChargeItem]] = Field(
        None,
        description="List of amount, and grouped aggregates by resource type.",
        example=[
            {"amount": "10.00", "name": "Spaces Subscription", "count": "1"},
            {"amount": "2.34", "name": "Database Clusters", "count": "1"},
        ],
    )


class SimpleCharge(BaseModel):
    name: Optional[str] = Field(
        None, description="Name of the charge", example="Overages"
    )
    amount: Optional[str] = Field(
        None, description="Total amount charged in USD", example="3.45"
    )


class InvoiceSummary(BaseModel):
    invoice_uuid: Optional[str] = Field(
        None,
        description="UUID of the invoice",
        example="22737513-0ea7-4206-8ceb-98a575af7681",
    )
    billing_period: Optional[str] = Field(
        None,
        description="Billing period of usage for which the invoice is issued, in `YYYY-MM`  format.",
        example="2020-01",
    )
    amount: Optional[str] = Field(
        None,
        description="Total amount of the invoice, in USD.  This will reflect month-to-date usage in the invoice preview.",
        example="27.13",
    )
    user_name: Optional[str] = Field(
        None,
        description="Name of the DigitalOcean customer being invoiced.",
        example="Sammy Shark",
    )
    user_billing_address: Optional[BillingAddress] = None
    user_company: Optional[str] = Field(
        None,
        description="Company of the DigitalOcean customer being invoiced, if set.",
        example="DigitalOcean",
    )
    user_email: Optional[str] = Field(
        None,
        description="Email of the DigitalOcean customer being invoiced.",
        example="sammy@digitalocean.com",
    )
    product_charges: Optional[ProductUsageCharges] = None
    overages: Optional[SimpleCharge] = None
    taxes: Optional[SimpleCharge] = None
    credits_and_adjustments: Optional[SimpleCharge] = None


class DatabaseConnection(BaseModel):
    uri: Optional[str] = Field(
        None,
        description="A connection string in the format accepted by the `psql` command. This is provided as a convenience and should be able to be constructed by the other attributes.",
        example="postgres://doadmin:wv78n3zpz42xezdk@backend-do-user-19081923-0.db.ondigitalocean.com:25060/defaultdb?sslmode=require",
    )
    database: Optional[str] = Field(
        None, description="The name of the default database.", example="defaultdb"
    )
    host: Optional[str] = Field(
        None,
        description="The FQDN pointing to the database cluster's current primary node.",
        example="backend-do-user-19081923-0.db.ondigitalocean.com",
    )
    port: Optional[int] = Field(
        None,
        description="The port on which the database cluster is listening.",
        example=25060,
    )
    user: Optional[str] = Field(
        None, description="The default user for the database.", example="doadmin"
    )
    password: Optional[str] = Field(
        None,
        description="The randomly generated password for the default user.",
        example="wv78n3zpz42xezdk",
    )
    ssl: Optional[bool] = Field(
        None,
        description="A boolean value indicating if the connection should be made over SSL.",
        example=True,
    )


class AuthPlugin(Enum):
    mysql_native_password = "mysql_native_password"
    caching_sha2_password = "caching_sha2_password"


class MysqlSettings(BaseModel):
    auth_plugin: AuthPlugin = Field(
        ...,
        description="A string specifying the authentication method to be used for connections\nto the MySQL user account. The valid values are `mysql_native_password`\nor `caching_sha2_password`. If excluded when creating a new user, the\ndefault for the version of MySQL in use will be used. As of MySQL 8.0, the\ndefault is `caching_sha2_password`.\n",
        example="mysql_native_password",
    )


class Role(Enum):
    primary = "primary"
    normal = "normal"


class DatabaseUser(BaseModel):
    name: str = Field(..., description="The name of a database user.", example="app-01")
    role: Optional[Role] = Field(
        None,
        description='A string representing the database user\'s role. The value will be either\n"primary" or "normal".\n',
        example="normal",
    )
    password: Optional[str] = Field(
        None,
        description="A randomly generated password for the database user.",
        example="jge5lfxtzhx42iff",
    )
    mysql_settings: Optional[MysqlSettings] = None


class DatabaseMaintenanceWindow(BaseModel):
    day: str = Field(
        ...,
        description="The day of the week on which to apply maintenance updates.",
        example="tuesday",
    )
    hour: str = Field(
        ...,
        description="The hour in UTC at which maintenance updates will be applied in 24 hour format.",
        example="14:00",
    )
    pending: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether any maintenance is scheduled to be performed in the next window.",
        example=True,
    )
    description: Optional[List[str]] = Field(
        None,
        description="A list of strings, each containing information about a pending maintenance update.",
        example=[
            "Update TimescaleDB to version 1.2.1",
            "Upgrade to PostgreSQL 11.2 and 10.7 bugfix releases",
        ],
    )


class Type5(Enum):
    droplet = "droplet"
    k8s = "k8s"
    ip_addr = "ip_addr"
    tag = "tag"
    app = "app"


class FirewallRule(BaseModel):
    uuid: Optional[str] = Field(
        None,
        description="A unique ID for the firewall rule itself.",
        example="79f26d28-ea8a-41f2-8ad8-8cfcdd020095",
        regex="^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
    )
    cluster_uuid: Optional[str] = Field(
        None,
        description="A unique ID for the database cluster to which the rule is applied.",
        example="9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
        regex="^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
    )
    type: Type5 = Field(
        ...,
        description="The type of resource that the firewall rule allows to access the database cluster.",
        example="droplet",
    )
    value: str = Field(
        ...,
        description="The ID of the specific resource, the name of a tag applied to a group of resources, or the IP address that the firewall rule allows to access the database cluster.",
        example="ff2a6c52-5a44-4b63-b99c-0e98e7a63d61",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the firewall rule was created.",
        example="2019-01-11T18:37:36Z",
    )


class Engine1(Enum):
    pg = "pg"
    mysql = "mysql"
    redis = "redis"
    mongodb = "mongodb"


class Status2(Enum):
    creating = "creating"
    online = "online"
    resizing = "resizing"
    migrating = "migrating"
    forking = "forking"


class DatabaseCluster(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a database cluster.",
        example="9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
    )
    name: str = Field(
        ...,
        description="A unique, human-readable name referring to a database cluster.",
        example="backend",
    )
    engine: Engine1 = Field(
        ...,
        description='A slug representing the database engine used for the cluster. The possible values are: "pg" for PostgreSQL, "mysql" for MySQL, "redis" for Redis, and "mongodb" for MongoDB.',
        example="pg",
    )
    version: Optional[str] = Field(
        None,
        description="A string representing the version of the database engine in use for the cluster.",
        example="10",
    )
    num_nodes: int = Field(
        ..., description="The number of nodes in the database cluster.", example=2
    )
    size: str = Field(
        ...,
        description="The slug identifier representing the size of the nodes in the database cluster.",
        example="db-s-2vcpu-4gb",
    )
    region: str = Field(
        ...,
        description="The slug identifier for the region where the database cluster is located.",
        example="nyc3",
    )
    status: Optional[Status2] = Field(
        None,
        description="A string representing the current status of the database cluster.",
        example="creating",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the database cluster was created.",
        example="2019-01-11T18:37:36Z",
    )
    private_network_uuid: Optional[str] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the database cluster will be assigned. If excluded, the cluster when creating a new database cluster, it will be assigned to your account's default VPC for the region.",
        example="d455e75d-4858-4eec-8c95-da2f0a5f93a7",
        regex="^$|[0-9a-f]{8}\\b-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-\\b[0-9a-f]{12}",
    )
    tags: Optional[List[str]] = Field(
        None,
        description="An array of tags that have been applied to the database cluster.",
        example=["production"],
    )
    db_names: Optional[List[str]] = Field(
        None,
        description="An array of strings containing the names of databases created in the database cluster.",
        example=["doadmin"],
    )
    connection: Optional[DatabaseConnection] = None
    private_connection: Optional[DatabaseConnection] = None
    users: Optional[List[DatabaseUser]] = None
    maintenance_window: Optional[DatabaseMaintenanceWindow] = None
    project_id: Optional[UUID] = Field(
        None,
        description="The ID of the project that the database cluster is assigned to. If excluded when creating a new database cluster, it will be assigned to your default project.",
        example="9cc10173-e9ea-4176-9dbc-a4cee4c4ff30",
    )
    rules: Optional[List[FirewallRule]] = None


class DatabaseBackup(BaseModel):
    database_name: str = Field(
        ...,
        description="The name of an existing database cluster from which the backup will be restored.",
        example="backend",
    )
    backup_created_at: Optional[datetime] = Field(
        None,
        description="The timestamp of an existing database cluster backup in ISO8601 combined date and time format. The most recent backup will be used if excluded.",
        example="2019-01-31T19:25:22Z",
    )


class InternalTmpMemStorageEngine(Enum):
    TempTable = "TempTable"
    MEMORY = "MEMORY"


class Mysql(BaseModel):
    backup_hour: Optional[int] = Field(
        None,
        description="The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.",
        example=3,
        ge=0,
        le=23,
    )
    backup_minute: Optional[int] = Field(
        None,
        description="The minute of the backup hour when backup for the service starts. New backup  only starts if previous backup has already completed.",
        example=30,
        ge=0,
        le=59,
    )
    sql_mode: Optional[str] = Field(
        None,
        description="Global SQL mode. If empty, uses MySQL server defaults. Must only include uppercase alphabetic characters, underscores, and commas.",
        example="ANSI,TRADITIONAL",
        max_length=1024,
        regex="^[A-Z_]*(,[A-Z_]+)*$",
    )
    connect_timeout: Optional[int] = Field(
        None,
        description="The number of seconds that the mysqld server waits for a connect packet before responding with bad handshake.",
        example=10,
        ge=2,
        le=3600,
    )
    default_time_zone: Optional[str] = Field(
        None,
        description="Default server time zone, in the form of an offset from UTC (from -12:00 to +12:00), a time zone name (EST), or 'SYSTEM' to use the MySQL server default.",
        example="+03:00",
        max_length=100,
        min_length=2,
    )
    group_concat_max_len: Optional[int] = Field(
        None,
        description="The maximum permitted result length, in bytes, for the GROUP_CONCAT() function.",
        example=1024,
        ge=4,
        le=18446744073709551616,
    )
    information_schema_stats_expiry: Optional[int] = Field(
        None,
        description="The time, in seconds, before cached statistics expire.",
        example=86400,
        ge=900,
        le=31536000,
    )
    innodb_ft_min_token_size: Optional[int] = Field(
        None,
        description="The minimum length of words that an InnoDB FULLTEXT index stores.",
        example=3,
        ge=0,
        le=16,
    )
    innodb_ft_server_stopword_table: Optional[str] = Field(
        None,
        description="The InnoDB FULLTEXT index stopword list for all InnoDB tables.",
        example="db_name/table_name",
        max_length=1024,
        regex="^.+/.+$",
    )
    innodb_lock_wait_timeout: Optional[int] = Field(
        None,
        description="The time, in seconds, that an InnoDB transaction waits for a row lock. before giving up.",
        example=50,
        ge=1,
        le=3600,
    )
    innodb_log_buffer_size: Optional[int] = Field(
        None,
        description="The size of the buffer, in bytes, that InnoDB uses to write to the log files. on disk.",
        example=16777216,
        ge=1048576,
        le=4294967295,
    )
    innodb_online_alter_log_max_size: Optional[int] = Field(
        None,
        description="The upper limit, in bytes, of the size of the temporary log files used during online DDL operations for InnoDB tables.",
        example=134217728,
        ge=65536,
        le=1099511627776,
    )
    innodb_print_all_deadlocks: Optional[bool] = Field(
        None,
        description="When enabled, records information about all deadlocks in InnoDB user transactions  in the error log. Disabled by default.",
        example=True,
    )
    innodb_rollback_on_timeout: Optional[bool] = Field(
        None,
        description="When enabled, transaction timeouts cause InnoDB to abort and roll back the entire transaction.",
        example=True,
    )
    interactive_timeout: Optional[int] = Field(
        None,
        description="The time, in seconds, the server waits for activity on an interactive. connection before closing it.",
        example=3600,
        ge=30,
        le=604800,
    )
    internal_tmp_mem_storage_engine: Optional[InternalTmpMemStorageEngine] = Field(
        None,
        description="The storage engine for in-memory internal temporary tables.",
        example="TempTable",
    )
    net_read_timeout: Optional[int] = Field(
        None,
        description="The time, in seconds, to wait for more data from an existing connection. aborting the read.",
        example=30,
        ge=1,
        le=3600,
    )
    net_write_timeout: Optional[int] = Field(
        None,
        description="The number of seconds to wait for a block to be written to a connection before aborting the write.",
        example=30,
        ge=1,
        le=3600,
    )
    sql_require_primary_key: Optional[bool] = Field(
        None,
        description="Require primary key to be defined for new tables or old tables modified with ALTER TABLE and fail if missing. It is recommended to always have primary keys because various functionality may break if any large table is missing them.",
        example=True,
    )
    wait_timeout: Optional[int] = Field(
        None,
        description="The number of seconds the server waits for activity on a noninteractive connection before closing it.",
        example=28800,
        ge=1,
        le=2147483,
    )
    max_allowed_packet: Optional[int] = Field(
        None,
        description="The size of the largest message, in bytes, that can be received by the server. Default is 67108864 (64M).",
        example=67108864,
        ge=102400,
        le=1073741824,
    )
    max_heap_table_size: Optional[int] = Field(
        None,
        description="The maximum size, in bytes, of internal in-memory tables. Also set tmp_table_size. Default is 16777216 (16M)",
        example=16777216,
        ge=1048576,
        le=1073741824,
    )
    sort_buffer_size: Optional[int] = Field(
        None,
        description="The sort buffer size, in bytes, for ORDER BY optimization. Default is 262144. (256K).",
        example=262144,
        ge=32768,
        le=1073741824,
    )
    tmp_table_size: Optional[int] = Field(
        None,
        description="The maximum size, in bytes, of internal in-memory tables. Also set max_heap_table_size. Default is 16777216 (16M).",
        example=16777216,
        ge=1048576,
        le=1073741824,
    )
    slow_query_log: Optional[bool] = Field(
        None,
        description="When enabled, captures slow queries. When disabled, also truncates the mysql.slow_log table. Default is false.",
        example=True,
    )
    long_query_time: Optional[float] = Field(
        None,
        description="The time, in seconds, for a query to take to execute before  being captured by slow_query_logs. Default is 10 seconds.",
        example=10,
        ge=0.0,
        le=3600.0,
    )
    binlog_retention_period: Optional[float] = Field(
        None,
        description="The minimum amount of time, in seconds, to keep binlog entries before deletion.  This may be extended for services that require binlog entries for longer than the default, for example if using the MySQL Debezium Kafka connector.",
        example=600,
        ge=600.0,
        le=86400.0,
    )


class IgnoreStartupParameter(Enum):
    extra_float_digits = "extra_float_digits"
    search_path = "search_path"


class AutodbPoolMode(Enum):
    session = "session"
    transaction = "transaction"
    statement = "statement"


class Pgbouncer(BaseModel):
    server_reset_query_always: Optional[bool] = Field(
        None,
        description="Run server_reset_query (DISCARD ALL) in all pooling modes.",
        example=False,
    )
    ignore_startup_parameters: Optional[List[IgnoreStartupParameter]] = Field(
        None,
        description="List of parameters to ignore when given in startup packet.",
        example=["extra_float_digits", "search_path"],
        max_items=32,
    )
    min_pool_size: Optional[int] = Field(
        None,
        description="If current server connections are below this number, adds more. Improves behavior when usual load comes suddenly back after period of total inactivity. The value is effectively capped at the pool size.",
        example=1,
        ge=0,
        le=10000,
    )
    server_lifetime: Optional[int] = Field(
        None,
        description="The pooler closes any unused server connection that has been connected longer than this amount of seconds.",
        example=3600,
        ge=60,
        le=86400,
    )
    server_idle_timeout: Optional[int] = Field(
        None,
        description="Drops server connections if they have been idle more than this many seconds.  If 0, timeout is disabled. ",
        example=600,
        ge=0,
        le=86400,
    )
    autodb_pool_size: Optional[int] = Field(
        None,
        description="If non-zero, automatically creates a pool of that size per user when a pool doesn't exist.",
        example=1,
        ge=0,
        le=10000,
    )
    autodb_pool_mode: Optional[AutodbPoolMode] = Field(
        None, description="PGBouncer pool mode", example="session"
    )
    autodb_max_db_connections: Optional[int] = Field(
        None,
        description="Only allows a maximum this many server connections per database (regardless of user). If 0, allows unlimited connections.",
        example=1,
        ge=0,
        le=2147483647,
    )
    autodb_idle_timeout: Optional[int] = Field(
        None,
        description="If the automatically-created database pools have been unused this many seconds, they are freed. If 0, timeout is disabled.",
        example=3600,
        ge=0,
        le=86400,
    )


class Timescaledb(BaseModel):
    max_background_workers: Optional[int] = Field(
        None,
        description="The number of background workers for timescaledb operations.  Set to the sum of your number of databases and the total number of concurrent background workers you want running at any given point in time.",
        example=8,
        ge=1,
        le=4096,
    )


class DefaultToastCompression(Enum):
    lz4 = "lz4"
    pglz = "pglz"


class LogErrorVerbosity(Enum):
    TERSE = "TERSE"
    DEFAULT = "DEFAULT"
    VERBOSE = "VERBOSE"


class LogLinePrefix(Enum):
    pid__p_user__u_db__d_app__a_client__h = "pid=%p,user=%u,db=%d,app=%a,client=%h"
    m___p___q_user__u_db__d_app__a_ = "%m [%p] %q[user=%u,db=%d,app=%a]"
    t___p_____l_1__user__u_db__d_app__a_client__h = (
        "%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h"
    )


class PgStatStatementsTrack(Enum):
    all = "all"
    top = "top"
    none = "none"


class TrackCommitTimestamp(Enum):
    off = "off"
    on = "on"


class TrackFunctions(Enum):
    all = "all"
    pl = "pl"
    none = "none"


class Postgres(BaseModel):
    autovacuum_freeze_max_age: Optional[int] = Field(
        None,
        description="Specifies the maximum age (in transactions) that a table's pg_class.relfrozenxid field can attain before a VACUUM operation is forced to prevent transaction ID wraparound within the table. Note that the system will launch autovacuum processes to prevent wraparound even when autovacuum is otherwise disabled. This parameter will cause the server to be restarted.",
        example=200000000,
        ge=200000000,
        le=1500000000,
    )
    autovacuum_max_workers: Optional[int] = Field(
        None,
        description="Specifies the maximum number of autovacuum processes (other than the autovacuum launcher) that may be running at any one time. The default is three. This parameter can only be set at server start.",
        example=5,
        ge=1,
        le=20,
    )
    autovacuum_naptime: Optional[int] = Field(
        None,
        description="Specifies the minimum delay, in seconds, between autovacuum runs on any given database. The default is one minute.",
        example=43200,
        ge=0,
        le=86400,
    )
    autovacuum_vacuum_threshold: Optional[int] = Field(
        None,
        description="Specifies the minimum number of updated or deleted tuples needed to trigger a VACUUM in any one table. The default is 50 tuples.",
        example=50,
        ge=0,
        le=2147483647,
    )
    autovacuum_analyze_threshold: Optional[int] = Field(
        None,
        description="Specifies the minimum number of inserted, updated, or deleted tuples needed to trigger an ANALYZE in any one table. The default is 50 tuples.",
        example=50,
        ge=0,
        le=2147483647,
    )
    autovacuum_vacuum_scale_factor: Optional[float] = Field(
        None,
        description="Specifies a fraction, in a decimal value, of the table size to add to autovacuum_vacuum_threshold when deciding whether to trigger a VACUUM. The default is 0.2 (20% of table size).",
        example=0.2,
        ge=0.0,
        le=1.0,
    )
    autovacuum_analyze_scale_factor: Optional[float] = Field(
        None,
        description="Specifies a fraction, in a decimal value, of the table size to add to autovacuum_analyze_threshold when deciding whether to trigger an ANALYZE. The default is 0.2 (20% of table size).",
        example=0.2,
        ge=0.0,
        le=1.0,
    )
    autovacuum_vacuum_cost_delay: Optional[int] = Field(
        None,
        description="Specifies the cost delay value, in milliseconds, that will be used in automatic VACUUM operations. If -1, uses the regular vacuum_cost_delay value, which is 20 milliseconds.",
        example=20,
        ge=-1,
        le=100,
    )
    autovacuum_vacuum_cost_limit: Optional[int] = Field(
        None,
        description="Specifies the cost limit value that will be used in automatic VACUUM operations. If -1 is specified (which is the default), the regular vacuum_cost_limit value will be used.",
        example=-1,
        ge=-1,
        le=10000,
    )
    backup_hour: Optional[int] = Field(
        None,
        description="The hour of day (in UTC) when backup for the service starts. New backup only starts if previous backup has already completed.",
        example=3,
        ge=0,
        le=23,
    )
    backup_minute: Optional[int] = Field(
        None,
        description="The minute of the backup hour when backup for the service starts. New backup is only started if previous backup has already completed.",
        example=30,
        ge=0,
        le=59,
    )
    bgwriter_delay: Optional[int] = Field(
        None,
        description="Specifies the delay, in milliseconds, between activity rounds for the background writer. Default is 200 ms.",
        example=200,
        ge=10,
        le=10000,
    )
    bgwriter_flush_after: Optional[int] = Field(
        None,
        description="The amount of kilobytes that need to be written by the background writer before attempting to force the OS to issue these writes to underlying storage. Specified in kilobytes, default is 512.  Setting of 0 disables forced writeback.",
        example=512,
        ge=0,
        le=2048,
    )
    bgwriter_lru_maxpages: Optional[int] = Field(
        None,
        description="The maximum number of buffers that the background writer can write. Setting this to zero disables background writing. Default is 100.",
        example=100,
        ge=0,
        le=1073741823,
    )
    bgwriter_lru_multiplier: Optional[float] = Field(
        None,
        description="The average recent need for new buffers is multiplied by bgwriter_lru_multiplier to arrive at an estimate of the number that will be needed during the next round, (up to bgwriter_lru_maxpages). 1.0 represents a “just in time” policy of writing exactly the number of buffers predicted to be needed. Larger values provide some cushion against spikes in demand, while smaller values intentionally leave writes to be done by server processes. The default is 2.0.",
        example=2,
        ge=0.0,
        le=10.0,
    )
    deadlock_timeout: Optional[int] = Field(
        None,
        description="The amount of time, in milliseconds, to wait on a lock before checking to see if there is a deadlock condition.",
        example=1000,
        ge=500,
        le=1800000,
    )
    default_toast_compression: Optional[DefaultToastCompression] = Field(
        None,
        description="Specifies the default TOAST compression method for values of compressible columns (the default is lz4).",
        example="lz4",
    )
    idle_in_transaction_session_timeout: Optional[int] = Field(
        None,
        description="Time out sessions with open transactions after this number of milliseconds",
        example=10000,
        ge=0,
        le=604800000,
    )
    jit: Optional[bool] = Field(
        None,
        description="Activates, in a boolean, the system-wide use of Just-in-Time Compilation (JIT).",
        example=True,
    )
    log_autovacuum_min_duration: Optional[int] = Field(
        None,
        description="Causes each action executed by autovacuum to be logged if it ran for at least the specified number of milliseconds. Setting this to zero logs all autovacuum actions. Minus-one (the default) disables logging autovacuum actions.",
        example=-1,
        ge=-1,
        le=2147483647,
    )
    log_error_verbosity: Optional[LogErrorVerbosity] = Field(
        None,
        description="Controls the amount of detail written in the server log for each message that is logged.",
        example="VERBOSE",
    )
    log_line_prefix: Optional[LogLinePrefix] = Field(
        None,
        description="Selects one of the available log-formats. These can support popular log analyzers like pgbadger, pganalyze, etc.",
        example="pid=%p,user=%u,db=%d,app=%a,client=%h",
    )
    log_min_duration_statement: Optional[int] = Field(
        None,
        description="Log statements that take more than this number of milliseconds to run. If -1, disables.",
        example=-1,
        ge=-1,
        le=86400000,
    )
    max_files_per_process: Optional[int] = Field(
        None,
        description="PostgreSQL maximum number of files that can be open per process.",
        example=2048,
        ge=1000,
        le=4096,
    )
    max_prepared_transactions: Optional[int] = Field(
        None,
        description="PostgreSQL maximum prepared transactions.",
        example=20,
        ge=0,
        le=10000,
    )
    max_pred_locks_per_transaction: Optional[int] = Field(
        None,
        description="PostgreSQL maximum predicate locks per transaction.",
        example=128,
        ge=64,
        le=640,
    )
    max_locks_per_transaction: Optional[int] = Field(
        None,
        description="PostgreSQL maximum locks per transaction.",
        example=128,
        ge=64,
        le=6400,
    )
    max_stack_depth: Optional[int] = Field(
        None,
        description="Maximum depth of the stack in bytes.",
        example=2097152,
        ge=2097152,
        le=6291456,
    )
    max_standby_archive_delay: Optional[int] = Field(
        None,
        description="Max standby archive delay in milliseconds.",
        example=43200,
        ge=1,
        le=43200000,
    )
    max_standby_streaming_delay: Optional[int] = Field(
        None,
        description="Max standby streaming delay in milliseconds.",
        example=43200,
        ge=1,
        le=43200000,
    )
    max_replication_slots: Optional[int] = Field(
        None,
        description="PostgreSQL maximum replication slots.",
        example=16,
        ge=8,
        le=64,
    )
    max_logical_replication_workers: Optional[int] = Field(
        None,
        description="PostgreSQL maximum logical replication workers (taken from the pool of max_parallel_workers).",
        example=16,
        ge=4,
        le=64,
    )
    max_parallel_workers: Optional[int] = Field(
        None,
        description="Sets the maximum number of workers that the system can support for parallel queries.",
        example=12,
        ge=0,
        le=96,
    )
    max_parallel_workers_per_gather: Optional[int] = Field(
        None,
        description="Sets the maximum number of workers that can be started by a single Gather or Gather Merge node.",
        example=16,
        ge=0,
        le=96,
    )
    max_worker_processes: Optional[int] = Field(
        None,
        description="Sets the maximum number of background processes that the system can support.",
        example=16,
        ge=8,
        le=96,
    )
    pg_partman_bgw_role: Optional[str] = Field(
        None,
        alias="pg_partman_bgw.role",
        description="Controls which role to use for pg_partman's scheduled background tasks. Must consist of alpha-numeric characters, dots, underscores, or dashes. May not start with dash or dot. Maximum of 64 characters.",
        example="myrolename",
        max_length=64,
        regex="^[_A-Za-z0-9][-._A-Za-z0-9]{0,63}$",
    )
    pg_partman_bgw_interval: Optional[int] = Field(
        None,
        alias="pg_partman_bgw.interval",
        description="Sets the time interval to run pg_partman's scheduled tasks.",
        example=3600,
        ge=3600,
        le=604800,
    )
    pg_stat_statements_track: Optional[PgStatStatementsTrack] = Field(
        None,
        alias="pg_stat_statements.track",
        description="Controls which statements are counted. Specify 'top' to track top-level statements (those issued directly by clients), 'all' to also track nested statements (such as statements invoked within functions), or 'none' to disable statement statistics collection. The default value is top.",
        example="all",
    )
    temp_file_limit: Optional[int] = Field(
        None,
        description="PostgreSQL temporary file limit in KiB. If -1, sets to unlimited.",
        example=5000000,
        ge=-1,
        le=2147483647,
    )
    timezone: Optional[str] = Field(
        None,
        description="PostgreSQL service timezone",
        example="Europe/Helsinki",
        max_length=64,
    )
    track_activity_query_size: Optional[int] = Field(
        None,
        description="Specifies the number of bytes reserved to track the currently executing command for each active session.",
        example=1024,
        ge=1024,
        le=10240,
    )
    track_commit_timestamp: Optional[TrackCommitTimestamp] = Field(
        None, description="Record commit time of transactions.", example="off"
    )
    track_functions: Optional[TrackFunctions] = Field(
        None,
        description="Enables tracking of function call counts and time used.",
        example="all",
    )
    track_io_timing: Optional[TrackCommitTimestamp] = Field(
        None,
        description="Enables timing of database I/O calls. This parameter is off by default, because it will repeatedly query the operating system for the current time, which may cause significant overhead on some platforms.",
        example="off",
    )
    max_wal_senders: Optional[int] = Field(
        None, description="PostgreSQL maximum WAL senders", example=8, ge=8, le=64
    )
    wal_sender_timeout: Optional[int] = Field(
        None,
        description="Terminate replication connections that are inactive for longer than this amount of time, in milliseconds. Setting this value to zero disables the timeout. Must be either 0 or between 5000 and 10800000.",
        example=60000,
        ge=0,
        le=10800000,
    )
    wal_writer_delay: Optional[int] = Field(
        None,
        description="WAL flush interval in milliseconds. Note that setting this value to lower than the default 200ms may negatively impact performance",
        example=50,
        ge=10,
        le=200,
    )
    shared_buffers_percentage: Optional[float] = Field(
        None,
        description="Percentage of total RAM that the database server uses for shared memory buffers.  Valid range is 20-60 (float), which corresponds to 20% - 60%.  This setting adjusts the shared_buffers configuration value.",
        example=41.5,
        ge=20.0,
        le=60.0,
    )
    pgbouncer: Optional[Pgbouncer] = None
    work_mem: Optional[int] = Field(
        None,
        description="The maximum amount of memory, in MB, used by a query operation (such as a sort or hash table) before writing to temporary disk files. Default is 1MB + 0.075% of total RAM (up to 32MB).",
        example=4,
        ge=1,
        le=1024,
    )
    timescaledb: Optional[Timescaledb] = None


class RedisMaxmemoryPolicy(Enum):
    noeviction = "noeviction"
    allkeys_lru = "allkeys-lru"
    volatile_lru = "volatile-lru"
    allkeys_random = "allkeys-random"
    volatile_random = "volatile-random"
    volatile_ttl = "volatile-ttl"
    volatile_lfu = "volatile-lfu"
    allkeys_lfu = "allkeys-lfu"


class RedisPersistence(Enum):
    off = "off"
    rdb = "rdb"


class RedisAclChannelsDefault(Enum):
    allchannels = "allchannels"
    resetchannels = "resetchannels"


class Redis(BaseModel):
    redis_maxmemory_policy: RedisMaxmemoryPolicy = Field(
        "noeviction", example="allkeys-lru"
    )
    redis_pubsub_client_output_buffer_limit: Optional[int] = Field(
        None,
        description="Set output buffer limit for pub / sub clients in MB. The value is the hard limit, the soft limit is 1/4 of the hard limit. When setting the limit, be mindful of the available memory in the selected service plan.",
        example=64,
        ge=32,
        le=512,
    )
    redis_number_of_databases: Optional[int] = Field(
        None,
        description="Set number of redis databases. Changing this will cause a restart of redis service.",
        example=16,
        ge=1,
        le=128,
    )
    redis_io_threads: Optional[int] = Field(
        None, description="Redis IO thread count", example=1, ge=1, le=32
    )
    redis_lfu_log_factor: int = Field(
        10,
        description="Counter logarithm factor for volatile-lfu and allkeys-lfu maxmemory-policies",
        example=10,
        ge=0,
        le=100,
    )
    redis_lfu_decay_time: int = Field(
        1,
        description="LFU maxmemory-policy counter decay time in minutes",
        example=1,
        ge=1,
        le=120,
    )
    redis_ssl: bool = Field(
        True, description="Require SSL to access Redis", example=True
    )
    redis_timeout: int = Field(
        300,
        description="Redis idle connection timeout in seconds",
        example=300,
        ge=0,
        le=31536000,
    )
    redis_notify_keyspace_events: str = Field(
        "",
        description="Set notify-keyspace-events option",
        example="K",
        max_length=32,
        regex="^[KEg\\$lshzxeA]*$",
    )
    redis_persistence: Optional[RedisPersistence] = Field(
        None,
        description="When persistence is 'rdb', Redis does RDB dumps each 10 minutes if any key is changed. Also RDB dumps are done according to backup schedule for backup purposes. When persistence is 'off', no RDB dumps and backups are done, so data can be lost at any moment if service is restarted for any reason, or if service is powered off. Also service can't be forked.",
        example="rdb",
    )
    redis_acl_channels_default: Optional[RedisAclChannelsDefault] = Field(
        None,
        description="Determines default pub/sub channels' ACL for new users if ACL is not supplied. When this option is not defined, all_channels is assumed to keep backward compatibility. This option doesn't affect Redis configuration acl-pubsub-default.",
        example="allchannels",
    )


class DatabaseConfig(BaseModel):
    config: Optional[Union[Mysql, Postgres, Redis]] = None


class Ca(BaseModel):
    certificate: str = Field(
        ...,
        description="base64 encoding of the certificate used to secure database connections",
        example="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUVRVENDQXFtZ0F3SUJBZ0lVRUZZWTdBWFZQS0Raam9jb1lpMk00Y0dvcU0wd0RRWUpLb1pJaHZjTkFRRU0KQlFBd09qRTRNRFlHQTFVRUF3d3ZOek0zT1RaaE1XRXRaamhrTUMwME9HSmpMV0V4Wm1NdFpqbGhNVFZsWXprdwpORGhsSUZCeWIycGxZM1FnUTBFd0hoY05NakF3TnpFM01UVTFNREEyV2hjTk16QXdOekUxTVRVMU1EQTJXakE2Ck1UZ3dOZ1lEVlFRRERDODNNemM1Tm1FeFlTMW1PR1F3TFRRNFltTXRZVEZtWXkxbU9XRXhOV1ZqT1RBME9HVWcKVUhKdmFtVmpkQ0JEUVRDQ0FhSXdEUVlKS29aSWh2Y05BUUVCQlFBRGdnR1BBRENDQVlvQ2dnR0JBTVdScXhycwpMZnpNdHZyUmxKVEw4MldYMVBLZkhKbitvYjNYcmVBY3FZd1dBUUp2Q3IycmhxSXZieVZzMGlaU0NzOHI4c3RGClljQ0R1bkxJNmUwTy9laERZYTBIT2RrMkFFRzE1ckVOVmNha2NSczcyQWlHVHNrdkNXS2VkUjFTUWswVWt0WCsKQUg4S1ExS3F5bzNtZ2Y2cVV1WUpzc3JNTXFselk3YTN1RVpEb2ZqTjN5Q3MvM21pTVJKcVcyNm1JV0IrUUlEbAo5YzdLRVF5MTZvdCtjeHVnd0lLMm9oZHMzaFY1bjBKMFVBM0I3QWRBdXY5aUl5L3JHaHlTNm5CNTdaWm9JZnAyCnFybXdOY0UrVjlIdXhQSGtRVjFOQjUwOFFudWZ4Z0E5VCtqU2VrdGVUbWFORkxqNjFXL3BtcndrTytOaWFXUTIKaGgzVXBKOEozY1BoNkErbHRnUmpSV2NEb2lsYVNwRVVpU09WemNNYVFvalZKYVJlNk9NbnZYc29NaSs3ZzdneApWcittQ0lUcGcvck9DaXpBWWQ2UFAxLzdYTjk1ZXNmU2tBQnM5c3hJakpjTUFqbDBYTEFzRmtGZVdyeHNIajlVCmJnaDNWYXdtcnpUeXhZT0RQcXV1cS9JcGlwc0RRT3Fpb2ZsUStkWEJJL3NUT0NNbVp6K0pNcG5HYXdJREFRQUIKb3o4d1BUQWRCZ05WSFE0RUZnUVVSekdDRlE3WEtUdHRDN3JzNS8ydFlQcExTZGN3RHdZRFZSMFRCQWd3QmdFQgovd0lCQURBTEJnTlZIUThFQkFNQ0FRWXdEUVlKS29aSWh2Y05BUUVNQlFBRGdnR0JBSWFKQ0dSVVNxUExtcmcvCmk3MW10b0NHUDdzeG1BVXVCek1oOEdrU25uaVdaZnZGMTRwSUtqTlkwbzVkWmpHKzZqK1VjalZtK0RIdGE1RjYKOWJPeEk5S0NFeEI1blBjRXpMWjNZYitNOTcrellxbm9zUm85S21DVFJBb2JrNTZ0WU1FS1h1aVJja2tkMm1yUQo4cGw2N2xxdThjM1V4c0dHZEZVT01wMkk3ZTNpdUdWVm5UR0ZWM3JQZUdaQ0J3WGVyUUQyY0F4UjkzS3BnWVZ2ClhUUzk5dnpSbm1HOHhhUm9EVy9FbEdXZ2xWd0Q5a1JrbXhUUkdoYTdDWVZCcjFQVWY2dVVFVjhmVFIxc1hFZnIKLytMR1JoSVVsSUhWT3l2Yzk3YnZYQURPbWF1MWZDVE5lWGtRdTNyZnZFSlBmaFlLeVIwT0V3eWVvdlhRNzl0LwpTV2ZGTjBreU1Pc1UrNVNIdHJKSEh1eWNWcU0yQlVVK083VjM1UnNwOU9MZGRZMFFVbTZldFpEVEhhSUhYYzRRCnl1Rm1OL1NhSFZtNE0wL3BTVlJQdVd6TmpxMnZyRllvSDRtbGhIZk95TUNJMjc2elE2aWhGNkdDSHlkOUJqajcKUm1UWGEyNHM3NWhmSi9YTDV2bnJSdEtpVHJlVHF6V21EOVhnUmNMQ0gyS1hJaVRtSWc9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==",
    )


class OnlineMigration(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The ID of the currently running migration.",
        example="77b28fc8-19ff-11eb-8c9c-c68e24557488",
    )
    status: Optional[str] = Field(
        None, description="The current status of the migration.", example="running"
    )
    created_at: Optional[str] = Field(
        None,
        description="The time the migration was initiated, in ISO 8601 format.",
        example="2020-10-29T15:57:38Z",
    )


class SourceDatabase(BaseModel):
    source: Optional[DatabaseConnection] = None
    disable_ssl: Optional[bool] = Field(
        None,
        description="Enables SSL encryption when connecting to the source database.",
        example=False,
    )


class DatabaseClusterResize(BaseModel):
    size: str = Field(
        ...,
        description="A slug identifier representing desired the size of the nodes in the database cluster.",
        example="db-s-4vcpu-8gb",
    )
    num_nodes: int = Field(
        ...,
        description="The number of nodes in the database cluster. Valid values are are 1-3. In addition to the primary node, up to two standby nodes may be added for highly available configurations.",
        example=3,
    )


class Backup(BaseModel):
    created_at: datetime = Field(
        ...,
        description="A time value given in ISO8601 combined date and time format at which the backup was created.",
        example="2019-01-31T19:25:22Z",
    )
    size_gigabytes: float = Field(
        ..., description="The size of the database backup in GBs.", example=0.03364864
    )


class DatabaseReplica(BaseModel):
    name: str = Field(
        ...,
        description="The name to give the read-only replicating",
        example="read-nyc3-01",
    )
    region: Optional[str] = Field(
        None,
        description="A slug identifier for the region where the read-only replica will be located. If excluded, the replica will be placed in the same region as the cluster.",
        example="nyc3",
    )
    size: Optional[str] = Field(
        None,
        description="A slug identifier representing the size of the node for the read-only replica. The size of the replica must be at least as large as the node size for the database cluster from which it is replicating.",
        example="db-s-2vcpu-4gb",
    )
    status: Optional[Status2] = Field(
        None,
        description="A string representing the current status of the database cluster.",
        example="creating",
    )
    tags: Optional[List[str]] = Field(
        None,
        description="A flat array of tag names as strings to apply to the read-only replica after it is created. Tag names can either be existing or new tags.",
        example=["production"],
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the database cluster was created.",
        example="2019-01-11T18:37:36Z",
    )
    private_network_uuid: Optional[str] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the read-only replica will be assigned. If excluded, the replica will be assigned to your account's default VPC for the region.",
        example="9423cbad-9211-442f-820b-ef6915e99b5f",
    )
    connection: Optional[DatabaseConnection] = None
    private_connection: Optional[DatabaseConnection] = None


class Database(BaseModel):
    name: str = Field(..., description="The name of the database.", example="alpha")


class ConnectionPool(BaseModel):
    name: str = Field(
        ...,
        description="A unique name for the connection pool. Must be between 3 and 60 characters.",
        example="backend-pool",
    )
    mode: str = Field(
        ...,
        description="The PGBouncer transaction mode for the connection pool. The allowed values are session, transaction, and statement.",
        example="transaction",
    )
    size: int = Field(
        ...,
        description="The desired size of the PGBouncer connection pool. The maximum allowed size is determined by the size of the cluster's primary node. 25 backend server connections are allowed for every 1GB of RAM. Three are reserved for maintenance. For example, a primary node with 1 GB of RAM allows for a maximum of 22 backend server connections while one with 4 GB would allow for 97. Note that these are shared across all connection pools in a cluster.",
        example=10,
    )
    db: str = Field(
        ...,
        description="The database for use with the connection pool.",
        example="defaultdb",
    )
    user: str = Field(
        ...,
        description="The name of the user for use with the connection pool.",
        example="doadmin",
    )
    connection: Optional[DatabaseConnection] = None
    private_connection: Optional[DatabaseConnection] = None


class ConnectionPools(BaseModel):
    pools: Optional[List[ConnectionPool]] = Field(
        None, description="An array of connection pool objects."
    )


class EvictionPolicy(Enum):
    noeviction = "noeviction"
    allkeys_lru = "allkeys_lru"
    allkeys_random = "allkeys_random"
    volatile_lru = "volatile_lru"
    volatile_random = "volatile_random"
    volatile_ttl = "volatile_ttl"


class EvictionPolicyModel(BaseModel):
    eviction_policy: EvictionPolicy = Field(
        ...,
        description="A string specifying the desired eviction policy for the Redis cluster.",
        example="noeviction",
    )


class SqlMode(BaseModel):
    sql_mode: str = Field(
        ...,
        description="A string specifying the configured SQL modes for the MySQL cluster.",
        example="ANSI,ERROR_FOR_DIVISION_BY_ZERO,NO_ENGINE_SUBSTITUTION,NO_ZERO_DATE,NO_ZERO_IN_DATE,STRICT_ALL_TABLES",
    )


class Domain(BaseModel):
    name: Optional[str] = Field(
        None,
        description="The name of the domain itself. This should follow the standard domain format of domain.TLD. For instance, `example.com` is a valid domain name.",
        example="example.com",
    )
    ip_address: Optional[str] = Field(
        None,
        description="This optional attribute may contain an IP address. When provided, an A record will be automatically created pointing to the apex domain.",
        example="192.0.2.1",
    )
    ttl: Optional[int] = Field(
        None,
        description="This value is the time to live for the records on this domain, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.",
        example=1800,
    )
    zone_file: Optional[str] = Field(
        None,
        description="This attribute contains the complete contents of the zone file for the selected domain. Individual domain record resources should be used to get more granular control over records. However, this attribute can also be used to get information about the SOA record, which is created automatically and is not accessible as an individual record resource.",
        example="$ORIGIN example.com.\n$TTL 1800\nexample.com. IN SOA ns1.digitalocean.com. hostmaster.example.com. 1415982609 10800 3600 604800 1800\nexample.com. 1800 IN NS ns1.digitalocean.com.\nexample.com. 1800 IN NS ns2.digitalocean.com.\nexample.com. 1800 IN NS ns3.digitalocean.com.\nexample.com. 1800 IN A 1.2.3.4\n",
    )


class DomainRecord(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique identifier for each domain record.",
        example=28448429,
    )
    type: str = Field(
        ...,
        description="The type of the DNS record. For example: A, CNAME, TXT, ...",
        example="NS",
    )
    name: Optional[str] = Field(
        None,
        description="The host name, alias, or service being defined by the record.",
        example="@",
    )
    data: Optional[str] = Field(
        None,
        description='Variable data depending on record type. For example, the "data" value for an A record would be the IPv4 address to which the domain will be mapped. For a CAA record, it would contain the domain name of the CA being granted permission to issue certificates.',
        example="ns1.digitalocean.com",
    )
    priority: Optional[int] = Field(
        None, description="The priority for SRV and MX records."
    )
    port: Optional[int] = Field(None, description="The port for SRV records.")
    ttl: Optional[int] = Field(
        None,
        description="This value is the time to live for the record, in seconds. This defines the time frame that clients can cache queried information before a refresh should be requested.",
        example=1800,
    )
    weight: Optional[int] = Field(None, description="The weight for SRV records.")
    flags: Optional[int] = Field(
        None, description="An unsigned integer between 0-255 used for CAA records."
    )
    tag: Optional[str] = Field(
        None,
        description='The parameter tag for CAA records. Valid values are "issue", "issuewild", or "iodef"',
    )


class DomainRecordA(DomainRecord):
    pass


class DomainRecordAaaa(DomainRecordA):
    pass


class DomainRecordCaa(DomainRecordA):
    pass


class DomainRecordCname(DomainRecordA):
    pass


class DomainRecordMx(DomainRecordA):
    pass


class DomainRecordNs(DomainRecordA):
    pass


class DomainRecordSoa(DomainRecordA):
    pass


class DomainRecordSrv(DomainRecordA):
    pass


class DomainRecordTxt(DomainRecordA):
    pass


class Kernel(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique number used to identify and reference a specific kernel.",
        example=7515,
    )
    name: Optional[str] = Field(
        None,
        description="The display name of the kernel. This is shown in the web UI and is generally a descriptive title for the kernel in question.",
        example="DigitalOcean GrubLoader v0.2 (20160714)",
    )
    version: Optional[str] = Field(
        None,
        description="A standard kernel version string representing the version, patch, and release information.",
        example="2016.07.13-DigitalOcean_loader_Ubuntu",
    )


class ImageName(BaseModel):
    __root__: str = Field(
        ...,
        description="The display name that has been given to an image.  This is what is shown in the control panel and is generally a descriptive title for the image in question.",
        example="Nifty New Snapshot",
    )


class Distribution(Enum):
    Arch_Linux = "Arch Linux"
    CentOS = "CentOS"
    CoreOS = "CoreOS"
    Debian = "Debian"
    Fedora = "Fedora"
    Fedora_Atomic = "Fedora Atomic"
    FreeBSD = "FreeBSD"
    Gentoo = "Gentoo"
    openSUSE = "openSUSE"
    RancherOS = "RancherOS"
    Rocky_Linux = "Rocky Linux"
    Ubuntu = "Ubuntu"
    Unknown = "Unknown"


class RegionSlug1(Enum):
    ams1 = "ams1"
    ams2 = "ams2"
    ams3 = "ams3"
    blr1 = "blr1"
    fra1 = "fra1"
    lon1 = "lon1"
    nyc1 = "nyc1"
    nyc2 = "nyc2"
    nyc3 = "nyc3"
    sfo1 = "sfo1"
    sfo2 = "sfo2"
    sfo3 = "sfo3"
    sgp1 = "sgp1"
    tor1 = "tor1"


class RegionsArray(BaseModel):
    __root__: List[RegionSlug1] = Field(
        ...,
        description="This attribute is an array of the regions that the image is available in. The regions are represented by their identifying slug values.",
        example=["nyc1", "nyc2"],
    )


class ImageDescription(BaseModel):
    __root__: str = Field(
        ...,
        description="An optional free-form text field to describe an image.",
        example=" ",
    )


class TagsArray(BaseModel):
    __root__: Optional[List[str]] = Field(
        ...,
        description="A flat array of tag names as strings to be applied to the resource. Tag names may be for either existing or new tags.",
        example=["base-image", "prod"],
    )


class Type6(Enum):
    base = "base"
    snapshot = "snapshot"
    backup = "backup"
    custom = "custom"
    admin = "admin"


class Status4(Enum):
    NEW = "NEW"
    available = "available"
    pending = "pending"
    deleted = "deleted"
    retired = "retired"


class Image(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique number that can be used to identify and reference a specific image.",
        example=7555620,
    )
    name: Optional[ImageName] = None
    type: Optional[Type6] = Field(
        None,
        description="Describes the kind of image. It may be one of `base`, `snapshot`, `backup`, `custom`, or `admin`. Respectively, this specifies whether an image is a DigitalOcean base OS image, user-generated Droplet snapshot, automatically created Droplet backup, user-provided virtual machine image, or an image used for DigitalOcean managed resources (e.g. DOKS worker nodes).",
        example="snapshot",
    )
    distribution: Optional[Distribution] = None
    slug: Optional[str] = Field(
        None,
        description="A uniquely identifying string that is associated with each of the DigitalOcean-provided public images. These can be used to reference a public image as an alternative to the numeric id.",
        example="nifty1",
    )
    public: Optional[bool] = Field(
        None,
        description="This is a boolean value that indicates whether the image in question is public or not. An image that is public is available to all accounts. A non-public image is only accessible from your account.",
        example=True,
    )
    regions: Optional[RegionsArray] = None
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the image was created.",
        example="2020-05-04T22:23:02Z",
    )
    min_disk_size: Optional[int] = Field(
        None,
        description="The minimum disk size in GB required for a Droplet to use this image.",
        example=20,
        ge=0,
    )
    size_gigabytes: Optional[float] = Field(
        None, description="The size of the image in gigabytes.", example=2.34
    )
    description: Optional[ImageDescription] = None
    tags: Optional[TagsArray] = None
    status: Optional[Status4] = Field(
        None,
        description="A status string indicating the state of a custom image. This may be `NEW`,\n `available`, `pending`, `deleted`, or `retired`.",
        example="NEW",
    )
    error_message: Optional[str] = Field(
        None,
        description="A string containing information about errors that may occur when importing\n a custom image.",
        example=" ",
    )


class Size(BaseModel):
    slug: str = Field(
        ...,
        description="A human-readable string that is used to uniquely identify each size.",
        example="s-1vcpu-1gb",
    )
    memory: int = Field(
        ...,
        description="The amount of RAM allocated to Droplets created of this size. The value is represented in megabytes.",
        example=1024,
        ge=8,
        multiple_of=8.0,
    )
    vcpus: int = Field(
        ...,
        description="The integer of number CPUs allocated to Droplets of this size.",
        example=1,
    )
    disk: int = Field(
        ...,
        description="The amount of disk space set aside for Droplets of this size. The value is represented in gigabytes.",
        example=25,
    )
    transfer: float = Field(
        ...,
        description="The amount of transfer bandwidth that is available for Droplets created in this size. This only counts traffic on the public interface. The value is given in terabytes.",
        example=1,
    )
    price_monthly: float = Field(
        ...,
        description="This attribute describes the monthly cost of this Droplet size if the Droplet is kept for an entire month. The value is measured in US dollars.",
        example=5,
    )
    price_hourly: float = Field(
        ...,
        description="This describes the price of the Droplet size as measured hourly. The value is measured in US dollars.",
        example=0.00743999984115362,
    )
    regions: List[str] = Field(
        ...,
        description="An array containing the region slugs where this size is available for Droplet creates.",
        example=[
            "ams2",
            "ams3",
            "blr1",
            "fra1",
            "lon1",
            "nyc1",
            "nyc2",
            "nyc3",
            "sfo1",
            "sfo2",
            "sfo3",
            "sgp1",
            "tor1",
        ],
    )
    available: bool = Field(
        ...,
        description="This is a boolean value that represents whether new Droplets can be created with this size.",
        example=True,
    )
    description: str = Field(
        ...,
        description="A string describing the class of Droplets created from this size. For example: Basic, General Purpose, CPU-Optimized, Memory-Optimized, or Storage-Optimized.",
        example="Basic",
    )


class Type7(Enum):
    public = "public"
    private = "private"


class NetworkV4(BaseModel):
    ip_address: Optional[IPv4Address] = Field(
        None,
        description="The IP address of the IPv4 network interface.",
        example="104.236.32.182",
    )
    netmask: Optional[IPv4Address] = Field(
        None,
        description="The netmask of the IPv4 network interface.",
        example="255.255.192.0",
    )
    gateway: Optional[str] = Field(
        None,
        description="The gateway of the specified IPv4 network interface.\n\nFor private interfaces, a gateway is not provided. This is denoted by\nreturning `nil` as its value.\n",
        example="104.236.0.1",
    )
    type: Optional[Type7] = Field(
        None, description="The type of the IPv4 network interface.", example="public"
    )


class Type8(Enum):
    public = "public"


class NetworkV6(BaseModel):
    ip_address: Optional[IPv6Address] = Field(
        None,
        description="The IP address of the IPv6 network interface.",
        example="2604:a880:0:1010::18a:a001",
    )
    netmask: Optional[int] = Field(
        None, description="The netmask of the IPv6 network interface.", example=64
    )
    gateway: Optional[IPv6Address] = Field(
        None,
        description="The gateway of the specified IPv6 network interface.",
        example="2604:a880:0:1010::1",
    )
    type: Optional[Type8] = Field(
        None,
        description="The type of the IPv6 network interface.\n\n**Note**: IPv6 private  networking is not currently supported.\n",
        example="public",
    )


class Status5(Enum):
    new = "new"
    active = "active"
    off = "off"
    archive = "archive"


class NextBackupWindow(BaseModel):
    start: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format specifying the start of the Droplet's backup window.",
        example="2019-12-04T00:00:00Z",
    )
    end: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format specifying the end of the Droplet's backup window.",
        example="2019-12-04T23:00:00Z",
    )


class Networks(BaseModel):
    v4: Optional[List[NetworkV4]] = None
    v6: Optional[List[NetworkV6]] = None


class Droplet(BaseModel):
    id: int = Field(
        ...,
        description="A unique identifier for each Droplet instance. This is automatically generated upon Droplet creation.",
        example=3164444,
    )
    name: str = Field(
        ...,
        description="The human-readable name set for the Droplet instance.",
        example="example.com",
    )
    memory: int = Field(
        ...,
        description="Memory of the Droplet in megabytes.",
        example=1024,
        multiple_of=8.0,
    )
    vcpus: int = Field(..., description="The number of virtual CPUs.", example=1)
    disk: int = Field(
        ..., description="The size of the Droplet's disk in gigabytes.", example=25
    )
    locked: bool = Field(
        ...,
        description="A boolean value indicating whether the Droplet has been locked, preventing actions by users.",
        example=False,
    )
    status: Status5 = Field(
        ...,
        description='A status string indicating the state of the Droplet instance. This may be "new", "active", "off", or "archive".',
        example="active",
    )
    kernel: Kernel
    created_at: datetime = Field(
        ...,
        description="A time value given in ISO8601 combined date and time format that represents when the Droplet was created.",
        example="2020-07-21T18:37:44Z",
    )
    features: List[str] = Field(
        ...,
        description="An array of features enabled on this Droplet.",
        example=["backups", "private_networking", "ipv6"],
    )
    backup_ids: List[int] = Field(
        ...,
        description="An array of backup IDs of any backups that have been taken of the Droplet instance.  Droplet backups are enabled at the time of the instance creation.",
        example=[53893572],
    )
    next_backup_window: Optional[NextBackupWindow] = Field(
        ...,
        description="The details of the Droplet's backups feature, if backups are configured for the Droplet. This object contains keys for the start and end times of the window during which the backup will start.",
    )
    snapshot_ids: List[int] = Field(
        ...,
        description="An array of snapshot IDs of any snapshots created from the Droplet instance.",
        example=[67512819],
    )
    image: Image
    volume_ids: List[str] = Field(
        ...,
        description="A flat array including the unique identifier for each Block Storage volume attached to the Droplet.",
        example=["506f78a4-e098-11e5-ad9f-000f53306ae1"],
    )
    size: Size
    size_slug: str = Field(
        ...,
        description="The unique slug identifier for the size of this Droplet.",
        example="s-1vcpu-1gb",
    )
    networks: Networks = Field(
        ...,
        description="The details of the network that are configured for the Droplet instance.  This is an object that contains keys for IPv4 and IPv6.  The value of each of these is an array that contains objects describing an individual IP resource allocated to the Droplet.  These will define attributes like the IP address, netmask, and gateway of the specific network depending on the type of network it is.",
    )
    region: Region
    tags: List[str] = Field(
        ...,
        description="An array of Tags the Droplet has been tagged with.",
        example=["web", "env:prod"],
    )
    vpc_uuid: Optional[str] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the Droplet is assigned.",
        example="760e09ef-dc84-11e8-981e-3cfdfeaae000",
    )


class DropletCreate(BaseModel):
    region: str = Field(
        ...,
        description="The slug identifier for the region that you wish to deploy the Droplet in.",
        example="nyc3",
    )
    size: str = Field(
        ...,
        description="The slug identifier for the size that you wish to select for this Droplet.",
        example="s-1vcpu-1gb",
    )
    image: Union[str, int] = Field(
        ...,
        description="The image ID of a public or private image or the slug identifier for a public image. This image will be the base image for your Droplet.",
        example="ubuntu-20-04-x64",
    )
    ssh_keys: List[Union[str, int]] = Field(
        [],
        description="An array containing the IDs or fingerprints of the SSH keys that you wish to embed in the Droplet's root account upon creation.",
        example=[289794, "3b:16:e4:bf:8b:00:8b:b8:59:8c:a9:d3:f0:19:fa:45"],
    )
    backups: bool = Field(
        False,
        description="A boolean indicating whether automated backups should be enabled for the Droplet.",
        example=True,
    )
    ipv6: bool = Field(
        False,
        description="A boolean indicating whether to enable IPv6 on the Droplet.",
        example=True,
    )
    monitoring: bool = Field(
        False,
        description="A boolean indicating whether to install the DigitalOcean agent for monitoring.",
        example=True,
    )
    tags: Optional[List[str]] = Field(
        [],
        description="A flat array of tag names as strings to apply to the Droplet after it is created. Tag names can either be existing or new tags.",
        example=["env:prod", "web"],
    )
    user_data: Optional[str] = Field(
        None,
        description="A string containing 'user data' which may be used to configure the Droplet on first boot, often a 'cloud-config' file or Bash script. It must be plain text and may not exceed 64 KiB in size.",
        example="#cloud-config\nruncmd:\n  - touch /test.txt\n",
    )
    private_networking: bool = Field(
        False,
        description="This parameter has been deprecated. Use `vpc_uuid` instead to specify a VPC network for the Droplet. If no `vpc_uuid` is provided, the Droplet will be placed in your account's default VPC for the region.",
        example=True,
    )
    vpc_uuid: Optional[str] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the Droplet will be assigned. If excluded, the Droplet will be assigned to your account's default VPC for the region.",
        example="760e09ef-dc84-11e8-981e-3cfdfeaae000",
    )
    with_droplet_agent: Optional[bool] = Field(
        None,
        description="A boolean indicating whether to install the DigitalOcean agent used for providing access to the Droplet web console in the control panel. By default, the agent is installed on new Droplets but installation errors (i.e. OS not supported) are ignored. To prevent it from being installed, set to `false`. To make installation errors fatal, explicitly set it to `true`.",
        example=True,
    )


class DropletSingleCreate(DropletCreate):
    name: str = Field(
        ...,
        description="The human-readable string you wish to use when displaying the Droplet name. The name, if set to a domain name managed in the DigitalOcean DNS management system, will configure a PTR record for the Droplet. The name set during creation will also determine the hostname for the Droplet in its internal configuration.",
        example="example.com",
    )


class DropletMultiCreate(DropletCreate):
    names: List[str] = Field(
        ...,
        description="An array of human human-readable strings you wish to use when displaying the Droplet name. Each name, if set to a domain name managed in the DigitalOcean DNS management system, will configure a PTR record for the Droplet. Each name set during creation will also determine the hostname for the Droplet in its internal configuration.",
        example=["sub-01.example.com", "sub-02.example.com"],
    )


class ActionLink(BaseModel):
    id: Optional[int] = Field(
        None,
        description="A unique numeric ID that can be used to identify and reference an action.",
        example=7515,
    )
    rel: Optional[str] = Field(
        None,
        description="A string specifying the type of the related action.",
        example="create",
    )
    href: Optional[AnyUrl] = Field(
        None,
        description="A URL that can be used to access the action.",
        example="https://api.digitalocean.com/v2/actions/7515",
    )


class SnapshotsBase(BaseModel):
    name: str = Field(
        ...,
        description="A human-readable name for the snapshot.",
        example="web-01-1595954862243",
    )
    created_at: datetime = Field(
        ...,
        description="A time value given in ISO8601 combined date and time format that represents when the snapshot was created.",
        example="2020-07-28T16:47:44Z",
    )
    regions: List[str] = Field(
        ...,
        description="An array of the regions that the snapshot is available in. The regions are represented by their identifying slug values.",
        example=["nyc3", "sfo3"],
    )
    min_disk_size: int = Field(
        ...,
        description="The minimum size in GB required for a volume or Droplet to use this snapshot.",
        example=25,
    )
    size_gigabytes: float = Field(
        ..., description="The billable size of the snapshot in gigabytes.", example=2.34
    )


class Type9(Enum):
    snapshot = "snapshot"
    backup = "backup"


class DropletSnapshot(SnapshotsBase):
    id: int = Field(
        ...,
        description="The unique identifier for the snapshot or backup.",
        example=6372321,
    )
    type: Type9 = Field(
        ...,
        description="Describes the kind of image. It may be one of `snapshot` or `backup`. This specifies whether an image is a user-generated Droplet snapshot or automatically created Droplet backup.",
        example="snapshot",
    )


class Type10(Enum):
    enable_backups = "enable_backups"
    disable_backups = "disable_backups"
    reboot = "reboot"
    power_cycle = "power_cycle"
    shutdown = "shutdown"
    power_off = "power_off"
    power_on = "power_on"
    restore = "restore"
    password_reset = "password_reset"
    resize = "resize"
    rebuild = "rebuild"
    rename = "rename"
    change_kernel = "change_kernel"
    enable_ipv6 = "enable_ipv6"
    snapshot = "snapshot"


class DropletAction(BaseModel):
    type: Type10 = Field(
        ...,
        description="The type of action to initiate for the Droplet.",
        example="reboot",
    )


class DropletActionRestore(DropletAction):
    image: Optional[int] = Field(
        None,
        description="The ID of a backup of the current Droplet instance to restore from.",
        example=12389723,
    )


class DropletActionResize(DropletAction):
    disk: Optional[bool] = Field(
        None,
        description="When `true`, the Droplet's disk will be resized in addition to its RAM and CPU. This is a permanent change and cannot be reversed as a Droplet's disk size cannot be decreased.",
        example=True,
    )
    size: Optional[str] = Field(
        None,
        description="The slug identifier for the size to which you wish to resize the Droplet.",
        example="s-2vcpu-2gb",
    )


class DropletActionRebuild(DropletAction):
    image: Optional[Union[str, int]] = Field(
        None,
        description="The image ID of a public or private image or the slug identifier for a public image. The Droplet will be rebuilt using this image as its base.",
        example="ubuntu-20-04-x64",
    )


class DropletActionRename(DropletAction):
    name: Optional[str] = Field(
        None, description="The new name for the Droplet.", example="nifty-new-name"
    )


class DropletActionChangeKernel(DropletAction):
    kernel: Optional[int] = Field(
        None,
        description="A unique number used to identify and reference a specific kernel.",
        example=12389723,
    )


class DropletActionSnapshot(DropletAction):
    name: Optional[str] = Field(
        None,
        description="The name to give the new snapshot of the Droplet.",
        example="Nifty New Snapshot",
    )


class Protocol(Enum):
    tcp = "tcp"
    udp = "udp"
    icmp = "icmp"


class FirewallRuleBase(BaseModel):
    protocol: Protocol = Field(
        ...,
        description="The type of traffic to be allowed. This may be one of `tcp`, `udp`, or `icmp`.",
        example="tcp",
    )
    ports: str = Field(
        ...,
        description='The ports on which traffic will be allowed specified as a string containing a single port, a range (e.g. "8000-9000"), or "0" when all ports are open for a protocol. For ICMP rules this parameter will always return "0".',
        example="8000",
    )


class FirewallRuleTarget(BaseModel):
    addresses: Optional[List[str]] = Field(
        None,
        description="An array of strings containing the IPv4 addresses, IPv6 addresses, IPv4 CIDRs, and/or IPv6 CIDRs to which the firewall will allow traffic.",
        example=["1.2.3.4", "18.0.0.0/8"],
    )
    droplet_ids: Optional[List[int]] = Field(
        None,
        description="An array containing the IDs of the Droplets to which the firewall will allow traffic.",
        example=[8043964],
    )
    load_balancer_uids: Optional[List[str]] = Field(
        None,
        description="An array containing the IDs of the load balancers to which the firewall will allow traffic.",
        example=["4de7ac8b-495b-4884-9a69-1050c6793cd6"],
    )
    kubernetes_ids: Optional[List[str]] = Field(
        None,
        description="An array containing the IDs of the Kubernetes clusters to which the firewall will allow traffic.",
        example=["41b74c5d-9bd0-5555-5555-a57c495b81a3"],
    )
    tags: Optional[TagsArray] = None


class InboundRule(FirewallRuleBase):
    sources: FirewallRuleTarget


class OutboundRule(FirewallRuleBase):
    destinations: FirewallRuleTarget


class FirewallRules(BaseModel):
    inbound_rules: Optional[List[InboundRule]] = None
    outbound_rules: Optional[List[OutboundRule]] = None


class Status6(Enum):
    waiting = "waiting"
    succeeded = "succeeded"
    failed = "failed"


class PendingChange(BaseModel):
    droplet_id: Optional[int] = Field(None, example=8043964)
    removing: Optional[bool] = Field(None, example=False)
    status: Optional[str] = Field(None, example="waiting")


class Firewall(FirewallRules):
    id: Optional[str] = Field(
        None,
        description="A unique ID that can be used to identify and reference a firewall.",
        example="bb4b2611-3d72-467b-8602-280330ecd65c",
    )
    status: Optional[Status6] = Field(
        None,
        description='A status string indicating the current state of the firewall. This can be "waiting", "succeeded", or "failed".',
        example="waiting",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the firewall was created.",
        example="2020-05-23T21:24:00Z",
    )
    pending_changes: Optional[List[PendingChange]] = Field(
        None,
        description='An array of objects each containing the fields "droplet_id", "removing", and "status". It is provided to detail exactly which Droplets are having their security policies updated. When empty, all changes have been successfully applied.',
        example=[{"droplet_id": 8043964, "removing": False, "status": "waiting"}],
    )
    name: Optional[str] = Field(
        None,
        description="A human-readable name for a firewall. The name must begin with an alphanumeric character. Subsequent characters must either be alphanumeric characters, a period (.), or a dash (-).",
        example="firewall",
        regex="^[a-zA-Z0-9][a-zA-Z0-9\\.-]+$",
    )
    droplet_ids: Optional[List[int]] = Field(
        None,
        description="An array containing the IDs of the Droplets assigned to the firewall.",
        example=[8043964],
    )
    tags: Optional[TagsArray] = None


class AssociatedResource(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the resource associated with the Droplet.",
        example="61486916",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the resource associated with the Droplet.",
        example="ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
    )
    cost: Optional[str] = Field(
        None,
        description="The cost of the resource in USD per month if the resource is retained after the Droplet is destroyed.",
        example="0.05",
    )


class SelectiveDestroyAssociatedResource(BaseModel):
    floating_ips: Optional[List[str]] = Field(
        None,
        description="An array of unique identifiers for the floating IPs to be scheduled for deletion.",
        example=["6186916"],
    )
    reserved_ips: Optional[List[str]] = Field(
        None,
        description="An array of unique identifiers for the reserved IPs to be scheduled for deletion.",
        example=["6186916"],
    )
    snapshots: Optional[List[str]] = Field(
        None,
        description="An array of unique identifiers for the snapshots to be scheduled for deletion.",
        example=["61486916"],
    )
    volumes: Optional[List[str]] = Field(
        None,
        description="An array of unique identifiers for the volumes to be scheduled for deletion.",
        example=["ba49449a-7435-11ea-b89e-0a58ac14480f"],
    )
    volume_snapshots: Optional[List[str]] = Field(
        None,
        description="An array of unique identifiers for the volume snapshots to be scheduled for deletion.",
        example=["edb0478d-7436-11ea-86e6-0a58ac144b91"],
    )


class DestroyedAssociatedResource(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the resource scheduled for deletion.",
        example="61486916",
    )
    name: Optional[str] = Field(
        None,
        description="The name of the resource scheduled for deletion.",
        example="ubuntu-s-1vcpu-1gb-nyc1-01-1585758823330",
    )
    destroyed_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format indicating when the resource was destroyed if the request was successful.",
        example="2020-04-01T18:11:49Z",
    )
    error_message: Optional[str] = Field(
        None,
        description="A string indicating that the resource was not successfully destroyed and providing additional information.",
        example=" ",
    )


class Resources(BaseModel):
    reserved_ips: Optional[List[DestroyedAssociatedResource]] = None
    floating_ips: Optional[List[DestroyedAssociatedResource]] = None
    snapshots: Optional[List[DestroyedAssociatedResource]] = None
    volumes: Optional[List[DestroyedAssociatedResource]] = None
    volume_snapshots: Optional[List[DestroyedAssociatedResource]] = None


class AssociatedResourceStatus(BaseModel):
    droplet: Optional[DestroyedAssociatedResource] = None
    resources: Optional[Resources] = Field(
        None,
        description="An object containing additional information about resource related to a Droplet requested to be destroyed.",
    )
    completed_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format indicating when the requested action was completed.",
        example="2020-04-01T18:11:49Z",
    )
    failures: Optional[int] = Field(
        None,
        description="A count of the associated resources that failed to be destroyed, if any.",
        example=0,
    )


class FloatingIp(BaseModel):
    ip: Optional[IPv4Address] = Field(
        None,
        description="The public IP address of the floating IP. It also serves as its identifier.",
        example="45.55.96.47",
    )
    region: Optional[Region] = None
    droplet: Optional[Union[Dict[str, Any], Droplet]] = Field(
        None,
        description="The Droplet that the floating IP has been assigned to. When you query a floating IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.",
    )
    locked: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether or not the floating IP has pending actions preventing new ones from being submitted.",
        example=True,
    )


class FloatingIpCreateItem(BaseModel):
    droplet_id: int = Field(
        ...,
        description="The ID of the Droplet that the floating IP will be assigned to.",
        example=2457247,
    )


class FloatingIpCreateItem1(BaseModel):
    region: str = Field(
        ...,
        description="The slug identifier for the region the floating IP will be reserved to.",
        example="nyc3",
    )


class FloatingIpCreate(BaseModel):
    __root__: Union[FloatingIpCreateItem, FloatingIpCreateItem1]


class Type11(Enum):
    assign = "assign"
    unassign = "unassign"


class FloatingIPsAction(BaseModel):
    type: Type11 = Field(
        ..., description="The type of action to initiate for the floating IP."
    )


class FloatingIpActionAssign(FloatingIPsAction):
    droplet_id: int = Field(
        ...,
        description="The ID of the Droplet that the floating IP will be assigned to.",
        example=758604968,
    )


class FloatingIpActionUnassign(FloatingIPsAction):
    pass


class ImageUpdate(BaseModel):
    name: Optional[ImageName] = None
    distribution: Optional[Distribution] = None
    description: Optional[ImageDescription] = None


class ImageNewCustom(ImageUpdate):
    url: Optional[str] = Field(
        None,
        description="A URL from which the custom Linux virtual machine image may be retrieved.  The image it points to must be in the raw, qcow2, vhdx, vdi, or vmdk format.  It may be compressed using gzip or bzip2 and must be smaller than 100 GB after being decompressed.",
        example="http://cloud-images.ubuntu.com/minimal/releases/bionic/release/ubuntu-18.04-minimal-cloudimg-amd64.img",
    )
    region: Optional[RegionSlug1] = None
    tags: Optional[TagsArray] = None


class Type12(Enum):
    convert = "convert"
    transfer = "transfer"


class ImageActionBase(BaseModel):
    type: Type12 = Field(
        ...,
        description="The action to be taken on the image. Can be either `convert` or `transfer`.",
        example="convert",
    )


class ImageActionTransfer(ImageActionBase):
    region: RegionSlug1


class KubernetesNodePoolSize(BaseModel):
    size: Optional[str] = Field(
        None,
        description="The slug identifier for the type of Droplet used as workers in the node pool.",
        example="s-1vcpu-2gb",
    )


class Effect(Enum):
    NoSchedule = "NoSchedule"
    PreferNoSchedule = "PreferNoSchedule"
    NoExecute = "NoExecute"


class KubernetesNodePoolTaint(BaseModel):
    key: Optional[str] = Field(
        None,
        description='An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.',
        example="priority",
    )
    value: Optional[str] = Field(
        None,
        description='An arbitrary string. The `key` and `value` fields of the `taint` object form a key-value pair. For example, if the value of the `key` field is "special" and the value of the `value` field is "gpu", the key value pair would be `special=gpu`.',
        example="high",
    )
    effect: Optional[Effect] = Field(
        None,
        description="How the node reacts to pods that it won't tolerate. Available effect values are `NoSchedule`, `PreferNoSchedule`, and `NoExecute`.",
        example="NoSchedule",
    )


class State1(Enum):
    provisioning = "provisioning"
    running = "running"
    draining = "draining"
    deleting = "deleting"


class Status7(BaseModel):
    state: Optional[State1] = Field(
        None,
        description="A string indicating the current status of the node.",
        example="provisioning",
    )


class Node(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference the node.",
        example="e78247f8-b1bb-4f7a-8db9-2a5f8d4b8f8f",
    )
    name: Optional[str] = Field(
        None,
        description="An automatically generated, human-readable name for the node.",
        example="adoring-newton-3niq",
    )
    status: Optional[Status7] = Field(
        None,
        description="An object containing a `state` attribute whose value is set to a string indicating the current status of the node.",
    )
    droplet_id: Optional[str] = Field(
        None,
        description="The ID of the Droplet used for the worker node.",
        example="205545370",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the node was created.",
        example="2018-11-15T16:00:11Z",
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the node was last updated.",
        example="2018-11-15T16:00:11Z",
    )


class KubernetesNodePoolBase(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a specific node pool.",
        example="cdda885e-7663-40c8-bc74-3a036c66545d",
    )
    name: Optional[str] = Field(
        None,
        description="A human-readable name for the node pool.",
        example="frontend-pool",
    )
    count: Optional[int] = Field(
        None, description="The number of Droplet instances in the node pool.", example=3
    )
    tags: Optional[List[str]] = Field(
        None,
        description="An array containing the tags applied to the node pool. All node pools are automatically tagged `k8s`, `k8s-worker`, and `k8s:$K8S_CLUSTER_ID`.",
        example=[
            "k8s",
            "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
            "k8s-worker",
            "production",
            "web-team",
        ],
    )
    labels: Optional[Dict[str, Any]] = Field(
        None,
        description="An object containing a set of Kubernetes labels. The keys and are values are both user-defined.",
    )
    taints: Optional[List[KubernetesNodePoolTaint]] = Field(
        None,
        description="An array of taints to apply to all nodes in a pool. Taints will automatically be applied to all existing nodes and any subsequent nodes added to the pool. When a taint is removed, it is removed from all nodes in the pool.",
    )
    auto_scale: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether auto-scaling is enabled for this node pool.",
        example=True,
    )
    min_nodes: Optional[int] = Field(
        None,
        description="The minimum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.",
        example=3,
    )
    max_nodes: Optional[int] = Field(
        None,
        description="The maximum number of nodes that this node pool can be auto-scaled to. The value will be `0` if `auto_scale` is set to `false`.",
        example=6,
    )
    nodes: Optional[List[Node]] = Field(
        None,
        description="An object specifying the details of a specific worker node in a node pool.",
    )


class KubernetesNodePool(KubernetesNodePoolSize, KubernetesNodePoolBase):
    pass


class Day(Enum):
    any = "any"
    monday = "monday"
    tuesday = "tuesday"
    wednesday = "wednesday"
    thursday = "thursday"
    friday = "friday"
    saturday = "saturday"
    sunday = "sunday"


class MaintenancePolicy(BaseModel):
    start_time: Optional[str] = Field(
        None,
        description="The start time in UTC of the maintenance window policy in 24-hour clock format / HH:MM notation (e.g., `15:00`).",
        example="12:00",
    )
    duration: Optional[str] = Field(
        None,
        description="The duration of the maintenance window policy in human-readable format.",
        example="4h0m0s",
    )
    day: Optional[Day] = Field(
        None,
        description="The day of the maintenance window policy. May be one of `monday` through `sunday`, or `any` to indicate an arbitrary week day.",
        example="any",
    )


class State2(Enum):
    running = "running"
    provisioning = "provisioning"
    degraded = "degraded"
    error = "error"
    deleted = "deleted"
    upgrading = "upgrading"
    deleting = "deleting"


class Status8(BaseModel):
    state: Optional[State2] = Field(
        None,
        description="A string indicating the current status of the cluster.",
        example="provisioning",
    )
    message: Optional[str] = Field(
        None,
        description="An optional message providing additional information about the current cluster state.",
        example="provisioning",
    )


class Cluster(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a Kubernetes cluster.",
        example="bd5f5959-5e1e-4205-a714-a914373942af",
    )
    name: str = Field(
        ...,
        description="A human-readable name for a Kubernetes cluster.",
        example="prod-cluster-01",
    )
    region: str = Field(
        ...,
        description="The slug identifier for the region where the Kubernetes cluster is located.",
        example="nyc1",
    )
    version: str = Field(
        ...,
        description='The slug identifier for the version of Kubernetes used for the cluster. If set to a minor version (e.g. "1.14"), the latest version within it will be used (e.g. "1.14.6-do.1"); if set to "latest", the latest published version will be used. See the `/v2/kubernetes/options` endpoint to find all currently available versions.',
        example="1.18.6-do.0",
    )
    cluster_subnet: Optional[str] = Field(
        None,
        description="The range of IP addresses in the overlay network of the Kubernetes cluster in CIDR notation.",
        example="10.244.0.0/16",
    )
    service_subnet: Optional[str] = Field(
        None,
        description="The range of assignable IP addresses for services running in the Kubernetes cluster in CIDR notation.",
        example="10.245.0.0/16",
    )
    vpc_uuid: Optional[UUID] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the Kubernetes cluster is assigned.",
        example="c33931f2-a26a-4e61-b85c-4e95a2ec431b",
    )
    ipv4: Optional[str] = Field(
        None,
        description="The public IPv4 address of the Kubernetes master node. This will not be set if high availability is configured on the cluster (v1.21+)",
        example="68.183.121.157",
    )
    endpoint: Optional[str] = Field(
        None,
        description="The base URL of the API server on the Kubernetes master node.",
        example="https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
    )
    tags: Optional[List[str]] = Field(
        None,
        description="An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.",
        example=[
            "k8s",
            "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
            "production",
            "web-team",
        ],
    )
    node_pools: List[KubernetesNodePool] = Field(
        ...,
        description="An object specifying the details of the worker nodes available to the Kubernetes cluster.",
    )
    maintenance_policy: Optional[MaintenancePolicy] = None
    auto_upgrade: bool = Field(
        False,
        description="A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.",
        example=True,
    )
    status: Optional[Status8] = Field(
        None,
        description="An object containing a `state` attribute whose value is set to a string indicating the current status of the cluster.",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was created.",
        example="2018-11-15T16:00:11Z",
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the Kubernetes cluster was last updated.",
        example="2018-11-15T16:00:11Z",
    )
    surge_upgrade: bool = Field(
        False,
        description="A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.",
        example=True,
    )
    ha: bool = Field(
        False,
        description="A boolean value indicating whether the control plane is run in a highly available configuration in the cluster. Highly available control planes incur less downtime.",
        example=True,
    )
    registry_enabled: Optional[bool] = Field(
        None,
        description="A read-only boolean value indicating if a container registry is integrated with the cluster.",
        example=True,
    )


class ClusterUpdate(BaseModel):
    name: str = Field(
        ...,
        description="A human-readable name for a Kubernetes cluster.",
        example="prod-cluster-01",
    )
    tags: Optional[List[str]] = Field(
        None,
        description="An array of tags applied to the Kubernetes cluster. All clusters are automatically tagged `k8s` and `k8s:$K8S_CLUSTER_ID`.",
        example=[
            "k8s",
            "k8s:bd5f5959-5e1e-4205-a714-a914373942af",
            "production",
            "web-team",
        ],
    )
    maintenance_policy: Optional[MaintenancePolicy] = None
    auto_upgrade: bool = Field(
        False,
        description="A boolean value indicating whether the cluster will be automatically upgraded to new patch releases during its maintenance window.",
        example=True,
    )
    surge_upgrade: bool = Field(
        False,
        description="A boolean value indicating whether surge upgrade is enabled/disabled for the cluster. Surge upgrade makes cluster upgrades fast and reliable by bringing up new nodes before destroying the outdated nodes.",
        example=True,
    )


class AssociatedKubernetesResource(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The ID of a resource associated with a Kubernetes cluster.",
        example="edb0478d-7436-11ea-86e6-0a58ac144b91",
    )
    name: Optional[str] = Field(
        None,
        description="The name of a resource associated with a Kubernetes cluster.",
        example="volume-001",
    )


class AssociatedKubernetesResources(BaseModel):
    load_balancers: Optional[List[AssociatedKubernetesResource]] = Field(
        None,
        description="A list of names and IDs for associated load balancers that can be destroyed along with the cluster.",
        example=[{"id": "4de7ac8b-495b-4884-9a69-1050c6793cd6", "name": "lb-001"}],
    )
    volumes: Optional[List[AssociatedKubernetesResource]] = Field(
        None,
        description="A list of names and IDs for associated volumes that can be destroyed along with the cluster.",
        example=[{"id": "ba49449a-7435-11ea-b89e-0a58ac14480f", "name": "volume-001"}],
    )
    volume_snapshots: Optional[List[AssociatedKubernetesResource]] = Field(
        None,
        description="A list of names and IDs for associated volume snapshots that can be destroyed along with the cluster.",
        example=[
            {"id": "edb0478d-7436-11ea-86e6-0a58ac144b91", "name": "snapshot-001"}
        ],
    )


class DestroyAssociatedKubernetesResources(BaseModel):
    load_balancers: Optional[List[str]] = Field(
        None,
        description="A list of IDs for associated load balancers to destroy along with the cluster.",
        example=["4de7ac8b-495b-4884-9a69-1050c6793cd6"],
    )
    volumes: Optional[List[str]] = Field(
        None,
        description="A list of IDs for associated volumes to destroy along with the cluster.",
        example=["ba49449a-7435-11ea-b89e-0a58ac14480f"],
    )
    volume_snapshots: Optional[List[str]] = Field(
        None,
        description="A list of IDs for associated volume snapshots to destroy along with the cluster.",
        example=["edb0478d-7436-11ea-86e6-0a58ac144b91"],
    )


class Credentials(BaseModel):
    server: Optional[AnyUrl] = Field(
        None,
        description="The URL used to access the cluster API server.",
        example="https://bd5f5959-5e1e-4205-a714-a914373942af.k8s.ondigitalocean.com",
    )
    certificate_authority_data: Optional[str] = Field(
        None,
        description="A base64 encoding of bytes representing the certificate authority data for accessing the cluster.",
        example="LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURKekNDQWcrZ0F3SUJBZ0lDQm5Vd0RRWUpLb1pJaHZjTkFRRUxCUUF3TXpFVk1CTUdBMVVFQ2hNTVJHbG4KYVhSaGJFOWpaV0Z1TVJvd0dBWURWUVFERXhGck9ITmhZWE1nUTJ4MWMzUmxjaUJEUVRBZUZ3MHlNREE0TURNeApOVEkxTWpoYUZ3MDBNREE0TURNeE5USTFNamhhTURNeEZUQVRCZ05WQkFvVERFUnBaMmwwWVd4UFkyVmhiakVhCk1CZ0dBMVVFQXhNUmF6aHpZV0Z6SUVOc2RYTjBaWElnUTBFd2dnRWlNQTBHQ1NxR1NJYjNEUUVCQVFVQUE0SUIKRHdBd2dnRUtBb0lCQVFDc21oa2JrSEpUcGhZQlN0R05VVE1ORVZTd2N3bmRtajArelQvcUZaNGsrOVNxUnYrSgpBd0lCaGpBU0JnTlZIUk1CQWY4RUNEQUdBUUgvQWdFQU1CMEdBMVVkRGdRV0JCUlRzazhhZ1hCUnFyZXdlTXJxClhwa3E1NXg5dVRBTkJna3Foa2lHOXcwQkFRc0ZBQU9DQVFFQXB6V2F6bXNqYWxXTEx3ZjVpbWdDblNINDlKcGkKYWkvbzFMdEJvVEpleGdqZzE1ZVppaG5BMUJMc0lWNE9BZGM3UEFsL040L0hlbENrTDVxandjamRnNVdaYnMzYwozcFVUQ0g5bVVwMFg1SVdhT1VKV292Q1hGUlM1R2VKYXlkSDVPUXhqTURzR2N2UlNvZGQrVnQ2MXE3aWdFZ2I1CjBOZ1l5RnRnc2p0MHpJN3hURzZFNnlsOVYvUmFoS3lIQks2eExlM1RnUGU4SXhWa2RwT3QzR0FhSDRaK0pLR3gKYisyMVZia1NnRE1QQTlyR0VKNVZwVXlBV0FEVXZDRVFHV0hmNGpQN2ZGZlc3T050S0JWY3h3YWFjcVBVdUhzWApwRG5DZVR3V1NuUVp6L05xNmQxWUtsMFdtbkwzTEowemJzRVFGbEQ4MkkwL09MY2dZSDVxMklOZHhBPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=",
    )
    client_certificate_data: Optional[str] = Field(
        None,
        description="A base64 encoding of bytes representing the x509 client\ncertificate data for access the cluster. This is only returned for clusters\nwithout support for token-based authentication.\n\nNewly created Kubernetes clusters do not return credentials using\ncertificate-based authentication. For additional information,\n[see here](https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/#authenticate).\n",
    )
    client_key_data: Optional[str] = Field(
        None,
        description="A base64 encoding of bytes representing the x509 client key\ndata for access the cluster. This is only returned for clusters without\nsupport for token-based authentication.\n\nNewly created Kubernetes clusters do not return credentials using\ncertificate-based authentication. For additional information,\n[see here](https://www.digitalocean.com/docs/kubernetes/how-to/connect-to-cluster/#authenticate).\n",
    )
    token: Optional[str] = Field(
        None,
        description="An access token used to authenticate with the cluster. This is only returned for clusters with support for token-based authentication.",
        example="$DIGITALOCEAN_TOKEN",
    )
    expires_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the access token expires.",
        example="2019-11-09T11:50:28.889080521Z",
    )


class KubernetesVersion(BaseModel):
    slug: Optional[str] = Field(
        None,
        description="The slug identifier for an available version of Kubernetes for use when creating or updating a cluster. The string contains both the upstream version of Kubernetes as well as the DigitalOcean revision.",
        example="1.16.13-do.0",
    )
    kubernetes_version: Optional[str] = Field(
        None,
        description="The upstream version string for the version of Kubernetes provided by a given slug.",
        example="1.16.13",
    )
    supported_features: Optional[List[str]] = Field(
        None,
        description="The features available with the version of Kubernetes provided by a given slug.",
        example=["cluster-autoscaler", "docr-integration", "token-authentication"],
    )


class KubernetesNodePoolUpdate(KubernetesNodePoolBase):
    pass


class KubernetesClusterUser(BaseModel):
    username: Optional[EmailStr] = Field(
        None,
        description="The username for the cluster admin user.",
        example="sammy@digitalocean.com",
    )
    groups: Optional[List[str]] = Field(
        None,
        description="A list of in-cluster groups that the user belongs to.",
        example=["k8saas:authenticated"],
    )


class User(BaseModel):
    kubernetes_cluster_user: Optional[KubernetesClusterUser] = None


class KubernetesRegion(BaseModel):
    name: Optional[str] = Field(
        None,
        description="A DigitalOcean region where Kubernetes is available.",
        example="New York 3",
    )
    slug: Optional[str] = Field(
        None,
        description="The identifier for a region for use when creating a new cluster.",
        example="nyc3",
    )


class KubernetesSize(BaseModel):
    name: Optional[str] = Field(
        None,
        description="A Droplet size available for use in a Kubernetes node pool.",
        example="s-1vcpu-2gb",
    )
    slug: Optional[str] = Field(
        None,
        description="The identifier for a size for use when creating a new cluster.",
        example="s-1vcpu-2gb",
    )


class Options(BaseModel):
    regions: Optional[List[KubernetesRegion]] = None
    versions: Optional[List[KubernetesVersion]] = None
    sizes: Optional[List[KubernetesSize]] = None


class KubernetesOptions(BaseModel):
    options: Optional[Options] = None


class Object(BaseModel):
    name: Optional[str] = Field(None, description="Name of the object", example="foo")
    kind: Optional[str] = Field(
        None, description="The kind of Kubernetes API object", example="config map"
    )
    namespace: Optional[str] = Field(
        None,
        description="The namespace the object resides in the cluster.",
        example="kube-system",
    )


class Diagnostic(BaseModel):
    check_name: Optional[str] = Field(
        None,
        description="The clusterlint check that resulted in the diagnostic.",
        example="unused-config-map",
    )
    severity: Optional[str] = Field(
        None,
        description="Can be one of error, warning or suggestion.",
        example="warning",
    )
    message: Optional[str] = Field(
        None,
        description="Feedback about the object for users to fix.",
        example="Unused config map",
    )
    object: Optional[Object] = Field(
        None,
        description="Metadata about the Kubernetes API object the diagnostic is reported on.",
    )


class ClusterlintResults(BaseModel):
    run_id: Optional[str] = Field(
        None,
        description="Id of the clusterlint run that can be used later to fetch the diagnostics.",
        example="50c2f44c-011d-493e-aee5-361a4a0d1844",
    )
    requested_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the schedule clusterlint run request was made.",
        example="2019-10-30T05:34:07Z",
    )
    completed_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the schedule clusterlint run request was completed.",
        example="2019-10-30T05:34:11Z",
    )
    diagnostics: Optional[List[Diagnostic]] = Field(
        None,
        description="An array of diagnostics reporting potential problems for the given cluster.",
    )


class ClusterlintRequest(BaseModel):
    include_groups: Optional[List[str]] = Field(
        None,
        description="An array of check groups that will be run when clusterlint executes checks.",
        example=["basic", "doks", "security"],
    )
    include_checks: Optional[List[str]] = Field(
        None,
        description="An array of checks that will be run when clusterlint executes checks.",
        example=["bare-pods", "resource-requirements"],
    )
    exclude_groups: Optional[List[str]] = Field(
        None,
        description="An array of check groups that will be omitted when clusterlint executes checks.",
        example=["workload-health"],
    )
    exclude_checks: Optional[List[str]] = Field(
        None,
        description="An array of checks that will be run when clusterlint executes checks.",
        example=["default-namespace"],
    )


class ClusterRegistries(BaseModel):
    cluster_uuids: Optional[List[str]] = Field(
        None,
        description="An array containing the UUIDs of Kubernetes clusters.",
        example=[
            "bd5f5959-5e1e-4205-a714-a914373942af",
            "50c2f44c-011d-493e-aee5-361a4a0d1844",
        ],
    )


class EntryProtocol(Enum):
    http = "http"
    https = "https"
    http2 = "http2"
    tcp = "tcp"
    udp = "udp"


class ForwardingRule(BaseModel):
    entry_protocol: EntryProtocol = Field(
        ...,
        description="The protocol used for traffic to the load balancer. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`. If you set the  `entry_protocol` to `upd`, the `target_protocol` must be set to `udp`.  When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.\n",
        example="https",
    )
    entry_port: int = Field(
        ...,
        description="An integer representing the port on which the load balancer instance will listen.",
        example=443,
    )
    target_protocol: EntryProtocol = Field(
        ...,
        description="The protocol used for traffic from the load balancer to the backend Droplets. The possible values are: `http`, `https`, `http2`, `tcp`, or `udp`. If you set the `target_protocol` to `upd`, the `entry_protocol` must be set to  `udp`. When using UDP, the load balancer requires that you set up a health  check with a port that uses TCP, HTTP, or HTTPS to work properly.\n",
        example="http",
    )
    target_port: int = Field(
        ...,
        description="An integer representing the port on the backend Droplets to which the load balancer will send traffic.",
        example=80,
    )
    certificate_id: Optional[str] = Field(
        None,
        description="The ID of the TLS certificate used for SSL termination if enabled.",
        example="892071a0-bb95-49bc-8021-3afd67a210bf",
    )
    tls_passthrough: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether SSL encrypted traffic will be passed through to the backend Droplets.",
        example=False,
    )


class Protocol1(Enum):
    http = "http"
    https = "https"
    tcp = "tcp"


class HealthCheck(BaseModel):
    protocol: Protocol1 = Field(
        "http",
        description="The protocol used for health checks sent to the backend Droplets. The possible values are `http`, `https`, or `tcp`.",
        example="http",
    )
    port: int = Field(
        80,
        description="An integer representing the port on the backend Droplets on which the health check will attempt a connection.",
        example=80,
    )
    path: str = Field(
        "/",
        description="The path on the backend Droplets to which the load balancer instance will send a request.",
        example="/",
    )
    check_interval_seconds: int = Field(
        10,
        description="The number of seconds between between two consecutive health checks.",
        example=10,
    )
    response_timeout_seconds: int = Field(
        5,
        description="The number of seconds the load balancer instance will wait for a response until marking a health check as failed.",
        example=5,
    )
    unhealthy_threshold: int = Field(
        5,
        description='The number of times a health check must fail for a backend Droplet to be marked "unhealthy" and be removed from the pool.',
        example=5,
    )
    healthy_threshold: int = Field(
        3,
        description='The number of times a health check must pass for a backend Droplet to be marked "healthy" and be re-added to the pool.',
        example=3,
    )


class Type13(Enum):
    cookies = "cookies"
    none = "none"


class StickySessions(BaseModel):
    type: Type13 = Field(
        "none",
        description="An attribute indicating how and if requests from a client will be persistently served by the same backend Droplet. The possible values are `cookies` or `none`.",
        example="cookies",
    )
    cookie_name: Optional[str] = Field(
        None,
        description="The name of the cookie sent to the client. This attribute is only returned when using `cookies` for the sticky sessions type.",
        example="DO-LB",
    )
    cookie_ttl_seconds: Optional[int] = Field(
        None,
        description="The number of seconds until the cookie set by the load balancer expires. This attribute is only returned when using `cookies` for the sticky sessions type.",
        example=300,
    )


class Size1(Enum):
    lb_small = "lb-small"
    lb_medium = "lb-medium"
    lb_large = "lb-large"


class Algorithm(Enum):
    round_robin = "round_robin"
    least_connections = "least_connections"


class Status9(Enum):
    new = "new"
    active = "active"
    errored = "errored"


class LoadBalancerBase(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference a load balancer.",
        example="4de7ac8b-495b-4884-9a69-1050c6793cd6",
    )
    name: Optional[str] = Field(
        None,
        description="A human-readable name for a load balancer instance.",
        example="example-lb-01",
    )
    ip: Optional[str] = Field(
        None,
        description="An attribute containing the public-facing IP address of the load balancer.",
        example="104.131.186.241",
        regex="^$|^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$",
    )
    size_unit: int = Field(
        1,
        description="How many nodes the load balancer contains. Each additional node increases the load balancer's ability to manage more connections. Load balancers can be scaled up or down, and you can change the number of nodes after creation up to once per hour. This field is currently not available in the AMS2, NYC2, or SFO1 regions. Use the `size` field to scale load balancers that reside in these regions.",
        example=3,
        ge=1,
        le=100,
    )
    size: Size1 = Field(
        "lb-small",
        description="This field has been replaced by the `size_unit` field for all regions except in AMS2, NYC2, and SFO1. Each available load balancer size now equates to the load balancer having a set number of nodes.\n* `lb-small` = 1 node\n* `lb-medium` = 3 nodes\n* `lb-large` = 6 nodes\n\nYou can resize load balancers after creation up to once per hour. You cannot resize a load balancer within the first hour of its creation.",
        example="lb-small",
    )
    algorithm: Algorithm = Field(
        "round_robin",
        description="This field has been deprecated. You can no longer specify an algorithm for load balancers.",
        example="round_robin",
    )
    status: Optional[Status9] = Field(
        None,
        description="A status string indicating the current state of the load balancer. This can be `new`, `active`, or `errored`.",
        example="new",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the load balancer was created.",
        example="2017-02-01T22:22:58Z",
    )
    forwarding_rules: List[ForwardingRule] = Field(
        ...,
        description="An array of objects specifying the forwarding rules for a load balancer.",
        ge=1.0,
    )
    health_check: Optional[HealthCheck] = None
    sticky_sessions: Optional[StickySessions] = None
    redirect_http_to_https: bool = Field(
        False,
        description="A boolean value indicating whether HTTP requests to the load balancer on port 80 will be redirected to HTTPS on port 443.",
        example=True,
    )
    enable_proxy_protocol: bool = Field(
        False,
        description="A boolean value indicating whether PROXY Protocol is in use.",
        example=True,
    )
    enable_backend_keepalive: bool = Field(
        False,
        description="A boolean value indicating whether HTTP keepalive connections are maintained to target Droplets.",
        example=True,
    )
    vpc_uuid: Optional[UUID] = Field(
        None,
        description="A string specifying the UUID of the VPC to which the load balancer is assigned.",
        example="c33931f2-a26a-4e61-b85c-4e95a2ec431b",
    )
    disable_lets_encrypt_dns_records: bool = Field(
        False,
        description="A boolean value indicating whether to disable automatic DNS record creation for Let's Encrypt certificates that are added to the load balancer.",
        example=True,
    )


class LoadBalancer(LoadBalancerBase):
    region: Optional[Region] = None
    droplet_ids: Optional[List[int]] = Field(
        None,
        description="An array containing the IDs of the Droplets assigned to the load balancer.",
        example=[3164444, 3164445],
    )
    tag: Optional[str] = Field(
        None,
        description="The name of a Droplet tag corresponding to Droplets assigned to the load balancer.",
        example="prod:web",
    )


class LoadBalancerCreateItem(LoadBalancerBase):
    droplet_ids: Optional[List[int]] = Field(
        None,
        description="An array containing the IDs of the Droplets assigned to the load balancer.",
        example=[3164444, 3164445],
    )
    region: Optional[RegionSlug1] = None


class LoadBalancerCreateItem1(LoadBalancerBase):
    tag: Optional[str] = Field(
        None,
        description="The name of a Droplet tag corresponding to Droplets assigned to the load balancer.",
        example="prod:web",
    )
    region: Optional[RegionSlug1] = None


class LoadBalancerCreate(BaseModel):
    __root__: Union[LoadBalancerCreateItem, LoadBalancerCreateItem1]


class SlackDetails(BaseModel):
    channel: str = Field(
        ...,
        description="Slack channel to notify of an alert trigger.",
        example="Production Alerts",
    )
    url: str = Field(
        ...,
        description="Slack Webhook URL.",
        example="https://hooks.slack.com/services/T1234567/AAAAAAAA/ZZZZZZ",
    )


class Alerts(BaseModel):
    email: List[str] = Field(
        ...,
        description="An email to notify on an alert trigger.",
        example=["bob@exmaple.com"],
    )
    slack: List[SlackDetails] = Field(..., description="Slack integration details.")


class Compare(Enum):
    GreaterThan = "GreaterThan"
    LessThan = "LessThan"


class Type14(Enum):
    v1_insights_droplet_load_1 = "v1/insights/droplet/load_1"
    v1_insights_droplet_load_5 = "v1/insights/droplet/load_5"
    v1_insights_droplet_load_15 = "v1/insights/droplet/load_15"
    v1_insights_droplet_memory_utilization_percent = (
        "v1/insights/droplet/memory_utilization_percent"
    )
    v1_insights_droplet_disk_utilization_percent = (
        "v1/insights/droplet/disk_utilization_percent"
    )
    v1_insights_droplet_cpu = "v1/insights/droplet/cpu"
    v1_insights_droplet_disk_read = "v1/insights/droplet/disk_read"
    v1_insights_droplet_disk_write = "v1/insights/droplet/disk_write"
    v1_insights_droplet_public_outbound_bandwidth = (
        "v1/insights/droplet/public_outbound_bandwidth"
    )
    v1_insights_droplet_public_inbound_bandwidth = (
        "v1/insights/droplet/public_inbound_bandwidth"
    )
    v1_insights_droplet_private_outbound_bandwidth = (
        "v1/insights/droplet/private_outbound_bandwidth"
    )
    v1_insights_droplet_private_inbound_bandwidth = (
        "v1/insights/droplet/private_inbound_bandwidth"
    )
    v1_insights_lbaas_avg_cpu_utilization_percent = (
        "v1/insights/lbaas/avg_cpu_utilization_percent"
    )
    v1_insights_lbaas_connection_utilization_percent = (
        "v1/insights/lbaas/connection_utilization_percent"
    )
    v1_insights_lbaas_droplet_health = "v1/insights/lbaas/droplet_health"
    v1_insights_lbaas_tls_connections_per_second_utilization_percent = (
        "v1/insights/lbaas/tls_connections_per_second_utilization_percent"
    )


class Window(Enum):
    field_5m = "5m"
    field_10m = "10m"
    field_30m = "30m"
    field_1h = "1h"


class AlertPolicy(BaseModel):
    alerts: Alerts
    compare: Compare = Field(..., example="GreaterThan")
    description: str = Field(..., example="CPU Alert")
    enabled: bool = Field(..., example=True)
    entities: List[str] = Field(..., example=["192018292"])
    tags: List[str] = Field(..., example=["droplet_tag"])
    type: Type14 = Field(..., example="v1/insights/droplet/cpu")
    uuid: str = Field(..., example="78b3da62-27e5-49ba-ac70-5db0b5935c64")
    value: float = Field(..., example=80)
    window: Window = Field(..., example="5m")


class ListAlertPolicy(BaseModel):
    policies: List[AlertPolicy]


class AlertPolicyRequest(BaseModel):
    alerts: Alerts
    compare: Compare = Field(..., example="GreaterThan")
    description: str = Field(..., example="CPU Alert")
    enabled: bool = Field(..., example=True)
    entities: List[str] = Field(..., example=["192018292"])
    tags: List[str] = Field(..., example=["droplet_tag"])
    type: Type14 = Field(..., example="v1/insights/droplet/cpu")
    value: float = Field(..., example=80)
    window: Window = Field(..., example="5m")


class MetricsResult(BaseModel):
    metric: Dict[str, str] = Field(
        ...,
        description="An object containing the metric labels.",
        example={"host_id": "19201920"},
    )
    values: List[List[Union[int, str]]] = Field(
        ..., example=[[1435781430, "1"], [1435781445, "1"]]
    )


class ResultType(Enum):
    matrix = "matrix"


class MetricsData(BaseModel):
    result: List[MetricsResult] = Field(..., description="Result of query.")
    resultType: ResultType = Field(..., example="matrix")


class Status10(Enum):
    success = "success"
    error = "error"


class Metrics(BaseModel):
    data: MetricsData
    status: Status10 = Field(..., example="success")


class Environment(Enum):
    Development = "Development"
    Staging = "Staging"
    Production = "Production"


class ProjectBase(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="The unique universal identifier of this project.",
        example="4e1bfbc3-dc3e-41f2-a18f-1b4d7ba71679",
    )
    owner_uuid: Optional[str] = Field(
        None,
        description="The unique universal identifier of the project owner.",
        example="99525febec065ca37b2ffe4f852fd2b2581895e7",
    )
    owner_id: Optional[int] = Field(
        None, description="The integer id of the project owner.", example=258992
    )
    name: Optional[str] = Field(
        None,
        description="The human-readable name for the project. The maximum length is 175 characters and the name must be unique.",
        example="my-web-api",
        max_length=175,
    )
    description: Optional[str] = Field(
        None,
        description="The description of the project. The maximum length is 255 characters.",
        example="My website API",
        max_length=255,
    )
    purpose: Optional[str] = Field(
        None,
        description='The purpose of the project. The maximum length is 255 characters. It can\nhave one of the following values:\n\n- Just trying out DigitalOcean\n- Class project / Educational purposes\n- Website or blog\n- Web Application\n- Service or API\n- Mobile Application\n- Machine learning / AI / Data processing\n- IoT\n- Operational / Developer tooling\n\nIf another value for purpose is specified, for example, "your custom purpose",\nyour purpose will be stored as `Other: your custom purpose`.\n',
        example="Service or API",
        max_length=255,
    )
    environment: Optional[Environment] = Field(
        None,
        description="The environment of the project's resources.",
        example="Production",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the project was created.",
        example="2018-09-27T20:10:35Z",
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the project was updated.",
        example="2018-09-27T20:10:35Z",
    )


class Project(ProjectBase):
    is_default: Optional[bool] = Field(
        None,
        description="If true, all resources will be added to this project if no project is specified.",
        example=False,
    )


class Urn(BaseModel):
    __root__: str = Field(
        ...,
        description="The uniform resource name (URN) for the resource in the format do:resource_type:resource_id.",
        example="do:droplet:13457723",
        regex="^do:(dbaas|domain|droplet|floatingip|loadbalancer|space|volume|kubernetes|vpc):.*",
    )


class Links(BaseModel):
    self: Optional[AnyUrl] = Field(
        None,
        description="A URI that can be used to retrieve the resource.",
        example="https://api.digitalocean.com/v2/droplets/13457723",
    )


class Status11(Enum):
    ok = "ok"
    not_found = "not_found"
    assigned = "assigned"
    already_assigned = "already_assigned"
    service_down = "service_down"


class Resource(BaseModel):
    urn: Optional[Urn] = None
    assigned_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the project was created.",
        example="2018-09-28T19:26:37Z",
    )
    links: Optional[Links] = Field(
        None,
        description="The links object contains the `self` object, which contains the resource relationship.",
    )
    status: Optional[Status11] = Field(
        None,
        description="The status of assigning and fetching the resources.",
        example="ok",
    )


class ProjectAssignment(BaseModel):
    resources: Optional[List[Urn]] = Field(
        None,
        description="A list of uniform resource names (URNs) to be added to a project.",
        example=["do:droplet:13457723"],
    )


class SubscriptionTierBase(BaseModel):
    name: Optional[str] = Field(
        None, description="The name of the subscription tier.", example="Basic"
    )
    slug: Optional[str] = Field(
        None,
        description="The slug identifier of the subscription tier.",
        example="basic",
    )
    included_repositories: Optional[int] = Field(
        None,
        description="The number of repositories included in the subscription tier. `0` indicates that the subscription tier includes unlimited repositories.",
        example=5,
    )
    included_storage_bytes: Optional[int] = Field(
        None,
        description="The amount of storage included in the subscription tier in bytes.",
        example=5368709120,
    )
    allow_storage_overage: Optional[bool] = Field(
        None,
        description="A boolean indicating whether the subscription tier supports additional storage above what is included in the base plan at an additional cost per GiB used.",
        example=True,
    )
    included_bandwidth_bytes: Optional[int] = Field(
        None,
        description="The amount of outbound data transfer included in the subscription tier in bytes.",
        example=5368709120,
    )
    monthly_price_in_cents: Optional[int] = Field(
        None,
        description="The monthly cost of the subscription tier in cents.",
        example=500,
    )
    storage_overage_price_in_cents: Optional[int] = Field(
        None,
        description="The price paid in cents per GiB for additional storage beyond what is included in the subscription plan.",
        example=2,
    )


class Subscription(BaseModel):
    tier: Optional[SubscriptionTierBase] = None
    created_at: Optional[datetime] = Field(
        None,
        description="The time at which the subscription was created.",
        example="2020-01-23T21:19:12Z",
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="The time at which the subscription was last updated.",
        example="2020-11-05T15:53:24Z",
    )


class Registry(BaseModel):
    name: Optional[str] = Field(
        None,
        description="A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.",
        example="example",
        max_length=63,
        regex="^[a-z0-9-]{1,63}$",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the registry was created.",
        example="2020-03-21T16:02:37Z",
    )
    region: Optional[str] = Field(
        None,
        description="Slug of the region where registry data is stored",
        example="fra1",
    )
    storage_usage_bytes: Optional[int] = Field(
        None,
        description="The amount of storage used in the registry in bytes.",
        example=29393920,
    )
    storage_usage_bytes_updated_at: Optional[datetime] = Field(
        None,
        description="The time at which the storage usage was updated. Storage usage is calculated asynchronously, and may not immediately reflect pushes to the registry.",
        example="2020-11-04T21:39:49.530562231Z",
    )
    subscription: Optional[Subscription] = None


class SubscriptionTierSlug(Enum):
    starter = "starter"
    basic = "basic"
    professional = "professional"


class Region4(Enum):
    nyc3 = "nyc3"
    sfo3 = "sfo3"
    ams3 = "ams3"
    sgp1 = "sgp1"
    fra1 = "fra1"


class RegistryCreate(BaseModel):
    name: str = Field(
        ...,
        description="A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.",
        example="example",
        max_length=63,
        regex="^[a-z0-9-]{1,63}$",
    )
    subscription_tier_slug: SubscriptionTierSlug = Field(
        ...,
        description="The slug of the subscription tier to sign up for. Valid values can be retrieved using the options endpoint.",
        example="basic",
    )
    region: Optional[Region4] = Field(
        None,
        description="Slug of the region where registry data is stored. When not provided, a region will be selected.",
        example="fra1",
    )


class RegistryDigitaloceanCom(BaseModel):
    auth: Optional[str] = Field(
        None,
        description="A base64 encoded string containing credentials for the container registry.",
        example="YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODI6YjdkMDNhNjk0N2IyMTdlZmI2ZjNlYzNiZDM1MDQ1ODIK",
    )


class Auths(BaseModel):
    registry_digitalocean_com: Optional[RegistryDigitaloceanCom] = Field(
        None, alias="registry.digitalocean.com"
    )


class DockerCredentials(BaseModel):
    auths: Optional[Auths] = None


class ValidateRegistry(BaseModel):
    name: str = Field(
        ...,
        description="A globally unique name for the container registry. Must be lowercase and be composed only of numbers, letters and `-`, up to a limit of 63 characters.",
        example="example",
        max_length=63,
        regex="^[a-z0-9-]{1,63}$",
    )


class RepositoryTag(BaseModel):
    registry_name: Optional[str] = Field(
        None, description="The name of the container registry.", example="example"
    )
    repository: Optional[str] = Field(
        None, description="The name of the repository.", example="repo-1"
    )
    tag: Optional[str] = Field(
        None, description="The name of the tag.", example="latest"
    )
    manifest_digest: Optional[str] = Field(
        None,
        description="The digest of the manifest associated with the tag.",
        example="sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
    )
    compressed_size_bytes: Optional[int] = Field(
        None, description="The compressed size of the tag in bytes.", example=2803255
    )
    size_bytes: Optional[int] = Field(
        None,
        description="The uncompressed size of the tag in bytes (this size is calculated asynchronously so it may not be immediately available).",
        example=5861888,
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="The time the tag was last updated.",
        example="2020-04-09T23:54:25Z",
    )


class Repository(BaseModel):
    registry_name: Optional[str] = Field(
        None, description="The name of the container registry.", example="example"
    )
    name: Optional[str] = Field(
        None, description="The name of the repository.", example="repo-1"
    )
    latest_tag: Optional[RepositoryTag] = None
    tag_count: Optional[int] = Field(
        None, description="The number of tags in the repository.", example=1
    )


class RepositoryBlob(BaseModel):
    digest: Optional[str] = Field(
        None,
        description="The digest of the blob",
        example="sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
    )
    compressed_size_bytes: Optional[int] = Field(
        None, description="The compressed size of the blob in bytes.", example=2803255
    )


class RepositoryManifest(BaseModel):
    registry_name: Optional[str] = Field(
        None, description="The name of the container registry.", example="example"
    )
    repository: Optional[str] = Field(
        None, description="The name of the repository.", example="repo-1"
    )
    digest: Optional[str] = Field(
        None,
        description="The manifest digest",
        example="sha256:cb8a924afdf0229ef7515d9e5b3024e23b3eb03ddbba287f4a19c6ac90b8d221",
    )
    compressed_size_bytes: Optional[int] = Field(
        None,
        description="The compressed size of the manifest in bytes.",
        example=2803255,
    )
    size_bytes: Optional[int] = Field(
        None,
        description="The uncompressed size of the manifest in bytes (this size is calculated asynchronously so it may not be immediately available).",
        example=5861888,
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="The time the manifest was last updated.",
        example="2020-04-09T23:54:25Z",
    )
    tags: Optional[List[str]] = Field(
        None,
        description="All tags associated with this manifest",
        example=["latest", "v1", "v2"],
    )
    blobs: Optional[List[RepositoryBlob]] = Field(
        None, description="All blobs associated with this manifest"
    )


class RepositoryV2(BaseModel):
    registry_name: Optional[str] = Field(
        None, description="The name of the container registry.", example="example"
    )
    name: Optional[str] = Field(
        None, description="The name of the repository.", example="repo-1"
    )
    latest_manifest: Optional[RepositoryManifest] = None
    tag_count: Optional[int] = Field(
        None, description="The number of tags in the repository.", example=1
    )
    manifest_count: Optional[int] = Field(
        None, description="The number of manifests in the repository.", example=1
    )


class Status12(Enum):
    requested = "requested"
    waiting_for_write_JWTs_to_expire = "waiting for write JWTs to expire"
    scanning_manifests = "scanning manifests"
    deleting_unreferenced_blobs = "deleting unreferenced blobs"
    cancelling = "cancelling"
    failed = "failed"
    succeeded = "succeeded"
    cancelled = "cancelled"


class GarbageCollection(BaseModel):
    uuid: Optional[str] = Field(
        None,
        description="A string specifying the UUID of the garbage collection.",
        example="eff0feee-49c7-4e8f-ba5c-a320c109c8a8",
    )
    registry_name: Optional[str] = Field(
        None, description="The name of the container registry.", example="example"
    )
    status: Optional[Status12] = Field(
        None,
        description="The current status of this garbage collection.",
        example="requested",
    )
    created_at: Optional[datetime] = Field(
        None,
        description="The time the garbage collection was created.",
        example="2020-10-30T21:03:24Z",
    )
    updated_at: Optional[datetime] = Field(
        None,
        description="The time the garbage collection was last updated.",
        example="2020-10-30T21:03:44Z",
    )
    blobs_deleted: Optional[int] = Field(
        None,
        description="The number of blobs deleted as a result of this garbage collection.",
        example=42,
    )
    freed_bytes: Optional[int] = Field(
        None,
        description="The number of bytes freed as a result of this garbage collection.",
        example=667,
    )


class UpdateRegistry(BaseModel):
    cancel: Optional[bool] = Field(
        None,
        description="A boolean value indicating that the garbage collection should be cancelled.",
        example=True,
    )


class EligibilityReason(Enum):
    OverRepositoryLimit = "OverRepositoryLimit"
    OverStorageLimit = "OverStorageLimit"


class SubscriptionTierExtended(BaseModel):
    eligible: Optional[bool] = Field(
        None,
        description="A boolean indicating whether your account it eligible to use a certain subscription tier.",
        example=True,
    )
    eligibility_reasons: Optional[List[EligibilityReason]] = Field(
        None,
        description="If your account is not eligible to use a certain subscription tier, this will include a list of reasons that prevent you from using the tier.",
        example=["OverRepositoryLimit"],
    )


class NeighborIds(BaseModel):
    neighbor_ids: Optional[List[List[int]]] = Field(
        None,
        description="An array of arrays. Each array will contain a set of Droplet IDs for Droplets that share a physical server.",
        example=[[168671828, 168663509, 168671815], [168671883, 168671750]],
    )


class ReservedIp(BaseModel):
    ip: Optional[IPv4Address] = Field(
        None,
        description="The public IP address of the reserved IP. It also serves as its identifier.",
        example="45.55.96.47",
    )
    region: Optional[Region] = None
    droplet: Optional[Union[Dict[str, Any], Droplet]] = Field(
        None,
        description="The Droplet that the reserved IP has been assigned to. When you query a reserved IP, if it is assigned to a Droplet, the entire Droplet object will be returned. If it is not assigned, the value will be null.",
    )
    locked: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether or not the reserved IP has pending actions preventing new ones from being submitted.",
        example=True,
    )


class ReservedIpCreateItem(BaseModel):
    droplet_id: int = Field(
        ...,
        description="The ID of the Droplet that the reserved IP will be assigned to.",
        example=2457247,
    )


class ReservedIpCreateItem1(BaseModel):
    region: str = Field(
        ...,
        description="The slug identifier for the region the reserved IP will be reserved to.",
        example="nyc3",
    )


class ReservedIpCreate(BaseModel):
    __root__: Union[ReservedIpCreateItem, ReservedIpCreateItem1]


class ReservedIpActionType(BaseModel):
    type: Type11 = Field(
        ..., description="The type of action to initiate for the reserved IP."
    )


class ReservedIpActionAssign(ReservedIpActionType):
    droplet_id: int = Field(
        ...,
        description="The ID of the Droplet that the reserved IP will be assigned to.",
        example=758604968,
    )


class ReservedIpActionUnassign(ReservedIpActionType):
    pass


class ResourceType(Enum):
    droplet = "droplet"
    volume = "volume"


class Snapshots(SnapshotsBase):
    id: str = Field(
        ..., description="The unique identifier for the snapshot.", example="6372321"
    )
    resource_id: str = Field(
        ...,
        description="The unique identifier for the resource that the snapshot originated from.",
        example="200776916",
    )
    resource_type: ResourceType = Field(
        ...,
        description="The type of resource that the snapshot originated from.",
        example="droplet",
    )
    tags: Optional[List[str]] = Field(
        ...,
        description="An array of Tags the snapshot has been tagged with.",
        example=["web", "env:prod"],
    )


class TagsMetadata(BaseModel):
    count: Optional[int] = Field(
        None,
        description="The number of tagged objects for this type of resource.",
        example=5,
        ge=0,
    )
    last_tagged_uri: Optional[str] = Field(
        None,
        description="The URI for the last tagged object for this type of resource.",
        example="https://api.digitalocean.com/v2/images/7555620",
    )


class Resources1(TagsMetadata):
    droplets: Optional[TagsMetadata] = None
    imgages: Optional[TagsMetadata] = None
    volumes: Optional[TagsMetadata] = None
    volume_snapshots: Optional[TagsMetadata] = None
    databases: Optional[TagsMetadata] = None


class Tags2(BaseModel):
    name: Optional[str] = Field(
        None,
        description='The name of the tag. Tags may contain letters, numbers, colons, dashes, and underscores.\nThere is a limit of 255 characters per tag.\n\n**Note:** Tag names are case stable, which means the capitalization you use when you first create a tag is canonical.\n\nWhen working with tags in the API, you must use the tag\'s canonical capitalization. For example, if you create a tag named "PROD", the URL to add that tag to a resource would be `https://api.digitalocean.com/v2/tags/PROD/resources` (not `/v2/tags/prod/resources`).\n\nTagged resources in the control panel will always display the canonical capitalization. For example, if you create a tag named "PROD", you can tag resources in the control panel by entering "prod". The tag will still display with its canonical capitalization, "PROD".\n',
        example="extra-awesome",
        max_length=255,
        regex="^[a-zA-Z0-9_\\-\\:]+$",
    )
    resources: Optional[Resources1] = Field(
        None,
        description="An embedded object containing key value pairs of resource type and resource statistics. It also includes a count of the total number of resources tagged with the current tag as well as a `last_tagged_uri` attribute set to the last resource tagged with the current tag.",
        example={
            "count": 5,
            "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620",
            "droplets": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/droplets/3164444",
            },
            "images": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/images/7555620",
            },
            "volumes": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/volumes/3d80cb72-342b-4aaa-b92e-4e4abb24a933",
            },
            "volume_snapshots": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/snapshots/1f6f46e8-6b60-11e9-be4e-0a58ac144519",
            },
            "databases": {
                "count": 1,
                "last_tagged_uri": "https://api.digitalocean.com/v2/databases/b92438f6-ba03-416c-b642-e9236db91976",
            },
        },
    )


class ErrorWithRootCauses(BaseModel):
    error: str = Field(
        ...,
        description="A message providing information about the error.",
        example="not_found",
    )
    messages: Optional[List[str]] = Field(
        None, description="A list of legacy error messages."
    )
    root_causes: List[str] = Field(
        ...,
        description="A list of underlying causes for the error, including details to help  resolve it when possible.",
        example=[],
    )


class ResourceType1(Enum):
    droplet = "droplet"
    image = "image"
    volume = "volume"
    volume_snapshot = "volume_snapshot"


class Resource1(BaseModel):
    resource_id: Optional[str] = Field(
        None,
        description="The identifier of a resource.",
        example="3d80cb72-342b-4aaa-b92e-4e4abb24a933",
    )
    resource_type: Optional[ResourceType1] = Field(
        None, description="The type of the resource.", example="volume"
    )


class TagsResource(BaseModel):
    resources: List[Resource1] = Field(
        ...,
        description="An array of objects containing resource_id and resource_type  attributes.",
        example=[
            {"resource_id": "9569411", "resource_type": "droplet"},
            {"resource_id": "7555620", "resource_type": "image"},
            {
                "resource_id": "3d80cb72-342b-4aaa-b92e-4e4abb24a933",
                "resource_type": "volume",
            },
        ],
    )


class VolumeBase(BaseModel):
    id: Optional[str] = Field(
        None,
        description="The unique identifier for the block storage volume.",
        example="506f78a4-e098-11e5-ad9f-000f53306ae1",
    )
    droplet_ids: Optional[List[int]] = Field(
        None,
        description="An array containing the IDs of the Droplets the volume is attached to. Note that at this time, a volume can only be attached to a single Droplet.",
        example=[],
    )
    name: Optional[str] = Field(
        None,
        description='A human-readable name for the block storage volume. Must be lowercase and be composed only of numbers, letters and "-", up to a limit of 64 characters. The name must begin with a letter.',
        example="example",
    )
    description: Optional[str] = Field(
        None,
        description="An optional free-form text field to describe a block storage volume.",
        example="Block store for examples",
    )
    size_gigabytes: Optional[int] = Field(
        None,
        description="The size of the block storage volume in GiB (1024^3).",
        example=10,
    )
    created_at: Optional[str] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the block storage volume was created.",
        example="2020-03-02T17:00:49Z",
    )
    tags: Optional[TagsArray] = None


class VolumeFull(VolumeBase):
    region: Optional[Region] = Field(
        None,
        example={
            "name": "New York 1",
            "slug": "nyc1",
            "sizes": [
                "s-1vcpu-1gb",
                "s-1vcpu-2gb",
                "s-1vcpu-3gb",
                "s-2vcpu-2gb",
                "s-3vcpu-1gb",
                "s-2vcpu-4gb",
                "s-4vcpu-8gb",
                "s-6vcpu-16gb",
                "s-8vcpu-32gb",
                "s-12vcpu-48gb",
                "s-16vcpu-64gb",
                "s-20vcpu-96gb",
                "s-24vcpu-128gb",
                "s-32vcpu-192gb",
            ],
            "features": ["private_networking", "backups", "ipv6", "metadata"],
            "available": True,
        },
    )
    filesystem_type: Optional[str] = Field(
        None,
        description="The type of filesystem currently in-use on the volume.",
        example="ext4",
    )
    filesystem_label: Optional[str] = Field(
        None,
        description="The label currently applied to the filesystem.",
        example="example",
    )


class VolumeSnapshotId(BaseModel):
    snapshot_id: Optional[str] = Field(
        None,
        description="The unique identifier for the volume snapshot from which to create the volume.",
        example="b0798135-fb76-11eb-946a-0a58ac146f33",
    )


class VolumeWriteFileSystemType(BaseModel):
    filesystem_type: str = Field(
        ...,
        description="The name of the filesystem type to be used on the volume. When provided, the volume will automatically be formatted to the specified filesystem type. Currently, the available options are `ext4` and `xfs`. Pre-formatted volumes are automatically mounted when attached to Ubuntu, Debian, Fedora, Fedora Atomic, and CentOS Droplets created on or after April 26, 2018. Attaching pre-formatted volumes to other Droplets is not recommended.",
        example="ext4",
    )


class VolumeWriteFileSystemLabel(BaseModel):
    __root__: str = Field(
        ...,
        description="The label applied to the filesystem. Labels for ext4 type filesystems may contain 16 characters while lables for xfs type filesystems are limited to 12 characters. May only be used in conjunction with filesystem_type.",
        example="example",
    )


class VolumesXfs(VolumeBase, VolumeSnapshotId, VolumeWriteFileSystemType):
    region: RegionSlug1
    filesystem_label: Optional[VolumeWriteFileSystemLabel] = None


class Type17(Enum):
    attach = "attach"
    detach = "detach"
    resize = "resize"


class VolumeActionPostBase(BaseModel):
    type: Type17 = Field(
        ..., description="The volume action to initiate.", example="attach"
    )
    region: Optional[RegionSlug1] = None


class VolumeActionDropletId(BaseModel):
    __root__: int = Field(
        ...,
        description="The unique identifier for the Droplet the volume will be attached or detached from.",
        example=11612190,
    )


class VolumeActionPostAttach(VolumeActionPostBase):
    droplet_id: VolumeActionDropletId
    tags: Optional[TagsArray] = None


class VolumeActionPostDetach(VolumeActionPostBase):
    droplet_id: VolumeActionDropletId


class VolumeAction(Action):
    type: Optional[str] = Field(
        None,
        description='This is the type of action that the object represents. For example, this could be "attach_volume" to represent the state of a volume attach action.',
        example="attach_volume",
    )
    resource_id: Optional[int] = None


class VolumeActionPostResize(VolumeActionPostBase):
    size_gigabytes: int = Field(
        ...,
        description="The new size of the block storage volume in GiB (1024^3).",
        le=16384,
    )


class VpcUpdatable(BaseModel):
    name: Optional[str] = Field(
        None,
        description="The name of the VPC. Must be unique and may only contain alphanumeric characters, dashes, and periods.",
        example="env.prod-vpc",
        regex="^[a-zA-Z0-9\\-\\.]+$",
    )
    description: Optional[str] = Field(
        None,
        description="A free-form text field for describing the VPC's purpose. It may be a maximum of 255 characters.",
        example="VPC for production environment",
        max_length=255,
    )


class VpcCreate(BaseModel):
    region: Optional[str] = Field(
        None,
        description="The slug identifier for the region where the VPC will be created.",
        example="nyc1",
    )
    ip_range: Optional[str] = Field(
        None,
        description="The range of IP addresses in the VPC in CIDR notation. Network ranges cannot overlap with other networks in the same account and must be in range of private addresses as defined in RFC1918. It may not be smaller than `/28` nor larger than `/16`. If no IP range is specified, a `/20` network range is generated that won't conflict with other VPC networks in your account.",
        example="10.10.10.0/24",
    )


class VpcDefault(BaseModel):
    default: Optional[bool] = Field(
        None,
        description="A boolean value indicating whether or not the VPC is the default network for the region. All applicable resources are placed into the default VPC network unless otherwise specified during their creation. The `default` field cannot be unset from `true`. If you want to set a new default VPC network, update the `default` field of another VPC network in the same region. The previous network's `default` field will be set to `false` when a new default VPC has been defined.",
        example=True,
    )


class VpcBase(BaseModel):
    id: Optional[UUID] = Field(
        None,
        description="A unique ID that can be used to identify and reference the VPC.",
        example="5a4981aa-9653-4bd1-bef5-d6bff52042e4",
    )
    urn: Optional[Urn] = None
    created_at: Optional[datetime] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format.",
        example="2020-03-13T19:20:47.442049222Z",
    )


class Vpc(VpcUpdatable, VpcCreate, VpcDefault, VpcBase):
    pass


class VpcMember(BaseModel):
    name: Optional[str] = Field(
        None, description="The name of the resource.", example="nyc1-load-balancer-01"
    )
    urn: Optional[Urn] = None
    created_at: Optional[str] = Field(
        None,
        description="A time value given in ISO8601 combined date and time format that represents when the resource was created.",
        example="2020-03-13T19:30:48Z",
    )


class VolumesExt4(VolumesXfs):
    pass
